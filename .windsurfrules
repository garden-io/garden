# .windsurfrules
# This file provides guidelines for AI agents working on the garden-io/garden repository.
# Adhering to these rules ensures consistency and quality in contributions.

# General Project Information
project:
  name: garden-io/garden
  description: A full-featured development framework for containers and serverless.
  license: MPL-2.0
  main_language: TypeScript
  workspaces:
    - cli
    - core
    - e2e
    - sdk
    - plugins/*

# Coding Style & Formatting
style_and_formatting:
  primary_linter: ESLint
  eslint_config: eslint.config.mjs (extends .eslintrc.autogenerated.cjs)
  formatter: Prettier
  prettier_config: .prettierrc.json
  key_rules:
    max_line_length: 120
    semicolons: false # Prettier: "semi": false
    quotes: double    # ESLint: "@stylistic/quotes": ["error", "double"]
    trailing_comma: es5 # Prettier: "trailingComma": "es5"
    arrow_function_parentheses: always # Prettier: "arrowParens": "always"
    tab_width: 2 # Prettier: "tabWidth": 2
    indent_style: spaces
    unused_imports: error (eslint-plugin-unused-imports)
    unused_variables: error (@typescript-eslint/no-unused-vars, '_' prefix ignored)
    no_floating_promises: error (@typescript-eslint/no-floating-promises)
    consistent_type_imports: error (@typescript-eslint/consistent-type-imports)
    no_console_log: error (no-console)
    no_any_type: warn (@typescript-eslint/no-explicit-any)
    file_header: |
      /*
       * Copyright (C) 2018-2025 Garden Technologies, Inc. <info@garden.io>
       *
       * This Source Code Form is subject to the terms of the Mozilla Public
       * License, v. 2.0. If a copy of the MPL was not distributed with this
       * file, You can obtain one at http://mozilla.org/MPL/2.0/.
       */
      # (Enforced by eslint-plugin-header)

# Testing
testing:
  framework: Mocha
  rules:
    no_pending_tests: warn (mocha/no-pending-tests)
    no_exclusive_tests: error (mocha/no-exclusive-tests) # e.g., it.only

# Version Control & Commits
version_control:
  commit_messages:
    style: Conventional Commits
    tool:
      commitlint:
        config: commitlint.config.cjs

# Important Scripts & Commands (from package.json)
commands:
  lint: "npm run lint" # (runs tsx ./scripts/run-script.ts lint --no-bail --parallel)
  format_check_prettier: "npm run prettier" # (runs prettier --check \"./**/*.ts\")
  format_fix: "npm run fix-format" # (runs tsx ./scripts/run-script.ts fix-format --no-bail --parallel)
  build: "npm run build"
  clean: "npm run clean"

# General Guidelines for AI Agents
agent_guidelines:
  - Always run linters and formatters before committing changes. Use `npm run fix-format` and `npm run lint`.
  - Ensure all new code includes the MPL-2.0 license header.
  - Follow TypeScript best practices, including strong typing and avoiding `any` where possible.
  - Write clear and concise commit messages adhering to the Conventional Commits specification.
  - When adding new dependencies, ensure they are compatible with the project's license and update [package.json](cci:7://file:///Users/edvald/Code/garden/package.json:0:0-0:0) accordingly.
  - Be mindful of the project's workspace structure when adding or modifying files.