# .windsurfrules

Welcome to the Garden project! This file provides comprehensive guidelines for AI agents working on the garden-io/garden repository. Adhering to these rules ensures consistency and quality in contributions.

## Core Operating Principles

1. **Code Quality First**
   - Always run `eslint` (see below) before committing changes
   - Ensure all new code includes the MPL-2.0 license header
   - Follow TypeScript best practices, including strong typing and avoiding `any` where possible

2. **Understanding the Task**
   - Carefully read and interpret user instructions
   - Be mindful of the project's workspace structure when adding or modifying files
   - Do not perform any operations beyond what is instructed

3. **Implementation Approach**
   - To build the project, run `npm run build` from the `cli/` directory
   - To build individual files run `tsc` from the `cli/` directory with the relative path

## Project Information

### General Details

- **Project Name**: garden-io/garden
- **Description**: A full-featured development framework for containers and serverless
- **License**: MPL-2.0 (Mozilla Public License 2.0)
- **Primary Language**: TypeScript
- **Repository**: <https://github.com/garden-io/garden>

Most code lives in the `core/` workspace. Only work there unless explicitly told otherwise or when given a
file elsewhere to work on.

### Workspace Structure

The project uses npm workspaces with the following structure:

```text
├── cli/         # CLI application workspace
├── core/        # Core library workspace
├── e2e/         # End-to-end tests workspace
├── sdk/         # SDK workspace
└── plugins/     # Various plugin workspaces
```

## Technology Stack and Constraints

### Core Technologies

- **TypeScript**: Modern TypeScript (ES2022 target)
- **Node.js**: >=22 (specified in engines)
- **npm**: >=10 (specified in engines)
- **Module System**: ESM (type: "module")

### Development Tools

- **Linter**: ESLint 9.x with TypeScript support
- **Formatter**: Prettier via eslint
- **Test Framework**: Mocha
- **Commit Linting**: Commitlint with conventional commits
- **Build Tool**: Custom build script (see below)

## Code Style & Formatting Guidelines

### ESLint Configuration

- **Config Files**:
  - `eslint.config.mjs` (main config)
  - `.eslintrc.autogenerated.cjs` (extended config)

### Prettier Configuration

- **Config File**: `.prettierrc.json`
- **Key Rules**:

  ```json
  {
    "semi": false,
    "trailingComma": "es5",
    "arrowParens": "always",
    "tabWidth": 2
  }
  ```

### Key Style Rules

1. **Line Length**: Maximum 120 characters
2. **Semicolons**: Omitted (Prettier: "semi": false)
3. **Quotes**: Double quotes (ESLint: "@stylistic/quotes": ["error", "double"])
4. **Trailing Commas**: ES5 style (Prettier: "trailingComma": "es5")
5. **Arrow Functions**: Always use parentheses (Prettier: "arrowParens": "always")
6. **Indentation**: 2 spaces (Prettier: "tabWidth": 2)

### TypeScript Rules

- **Unused Imports**: Error (eslint-plugin-unused-imports)
- **Unused Variables**: Error (@typescript-eslint/no-unused-vars, '_' prefix ignored)
- **Floating Promises**: Error (@typescript-eslint/no-floating-promises)
- **Type Imports**: Use consistent type imports (@typescript-eslint/consistent-type-imports)
- **Console Logs**: Error (no-console)
- **Any Type**: Warn (@typescript-eslint/no-explicit-any)

### Required File Header

All source files must include the MPL-2.0 license header:

```text
/*
 * Copyright (C) 2018-2025 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
```

This is enforced by eslint-plugin-header.

## Testing Guidelines

### Framework

- **Test Runner**: Mocha

### Testing Rules

- **No Pending Tests**: Warning (mocha/no-pending-tests)
- **No Exclusive Tests**: Error (mocha/no-exclusive-tests) - e.g., `it.only` is not allowed

## Version Control & Commit Guidelines

### Commit Message Convention

- **Style**: Conventional Commits specification
- **Enforcement**: commitlint with config at `commitlint.config.cjs`

### Example Commit Messages

```text
feat: add new kubernetes deployment feature
fix: resolve docker build issue
docs: update README with new examples
chore: update dependencies
refactor: simplify agent architecture
```

## Available Commands

### Linting & Formatting

Always use the following command to lint and format the code. Prefer this over fixing the errors yourself, only do that
if the command fails or if linting errors persist after running the command. You don't need permission to run this.

```bash
# Fix format and lint in one command (run from the root of the workspace being worked on):

eslint --ignore-pattern 'core/src/lib/**' --ext .ts,.tsx --fix <paths> # replace <paths> with the file paths you've added or modified
```

### Building

You MUST ONLY use the following command to build the project and run it from the cli/ directory.
You don't need permission to run this.

```bash
npx tsc --build . --pretty false
```

## Implementation Guidelines

### When Adding Dependencies

1. Ensure compatibility with MPL-2.0 license
2. Update the appropriate package.json file
3. Run `npm install` from the project root

### TypeScript Configuration

- **Base Config**: `tsconfig.base.json`
- **Module System**: nodenext
- **Target**: ES2022
- **Strict Mode**: Enabled
- **Source Maps**: Inline

### Directory Structure Conventions

```text
core/
├── src/           # Source code
├── test/          # Tests
└── build/         # Build output (gitignored)
```

## Error Handling Protocol

1. **Always handle errors gracefully**
   - Use try-catch blocks for async operations
   - Provide meaningful error messages
   - Log errors appropriately (avoid console.log)

2. **TypeScript Type Safety**
   - Avoid using `any` type
   - Use proper type guards
   - Define interfaces for complex objects

## Additional Notes

- The project uses a monorepo structure with npm workspaces
- Each workspace may have its own dependencies and build process
- When working on a specific package, run commands from that package's directory for faster execution
- The project supports both development and production builds
