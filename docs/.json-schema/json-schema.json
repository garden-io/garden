{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "required": [
    "kind",
    "name"
  ],
  "properties": {
    "kind": {
      "type": "string",
      "enum": [
        "Project",
        "Build",
        "Deploy",
        "Run",
        "Test",
        "Workflow",
        "ConfigTemplate",
        "RenderTemplate",
        "Module"
      ]
    },
    "name": {
      "type": "string",
      "pattern": "^[a-z0-9-]+$"
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Project"
          }
        }
      },
      "then": {
        "type": "object",
        "description": "Configuration for a Garden project. This should be specified in the garden.yml file in your project root.",
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string",
                "description": "The Garden apiVersion for this project.\n\nThe value garden.io/v0 is the default for backwards compatibility with\nGarden Acorn (0.12) when not explicitly specified.\n\nConfiguring garden.io/v1 explicitly in your project configuration allows\nyou to start using the new Action configs introduced in Garden Bonsai (0.13).\n\nNote that the value garden.io/v1 will break compatibility of your project\nwith Garden Acorn (0.12).\n\nEXPERIMENTAL: Configuring garden.io/v2 explicitly in your project configuration\nactivates the breaking changes introduced in Garden 0.14.\nThe list of breaking changes is not final yet, so use this setting at your own risk.\n\nPlease refer to [the deprecations guide](https://docs.garden.io/guides/deprecations) for more information.",
                "enum": [
                  "garden.io/v0",
                  "garden.io/v1",
                  "garden.io/v2"
                ]
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "kind": {
            "description": "Indicate what kind of config this is.",
            "default": "Project",
            "const": "Project"
          },
          "path": {
            "anyOf": [
              {
                "type": "string",
                "description": "The path to the project root."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "configPath": {
            "anyOf": [
              {
                "type": "string",
                "description": "The path to the project config file."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "my-sweet-project"
                ],
                "description": "The name of the project."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "id": {
            "anyOf": [
              {
                "type": "string",
                "description": "The project's ID in Garden Cloud."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "domain": {
            "anyOf": [
              {
                "type": "string",
                "description": "The domain to use for cloud features. Should be the full API/backend URL.",
                "format": "uri-reference"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "environments": {
            "anyOf": [
              {
                "type": "array",
                "description": "A list of environments to configure for the project.",
                "minItems": 1,
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "anyOf": [
                            {
                              "type": "string",
                              "examples": [
                                "dev"
                              ],
                              "description": "The name of the environment."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "defaultNamespace": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "examples": [
                            "user-${local.username}"
                          ],
                          "description": "Set the default namespace to use. This can be templated to be user-specific, or to use an environment variable (e.g. in CI).\n\nYou can also set this to `null`, in order to require an explicit namespace to be set on usage. This may be advisable for shared environments, but you may also be able to achieve the desired result by templating this field, as mentioned above.",
                          "default": "default"
                        },
                        "production": {
                          "anyOf": [
                            {
                              "type": "boolean",
                              "examples": [
                                true
                              ],
                              "description": "Flag the environment as a production environment.\n\nSetting this flag to `true` will activate the protection on the `build`, `delete`, `deploy`, `dev`, and\n`test` commands. A protected command will ask for a user confirmation every time is run against\nan environment marked as production.\nRun the command with the \"--yes\" flag to skip the check (e.g. when running Garden in CI).\n\nThis flag is also passed on to every provider, and may affect how certain providers behave.\nFor more details please check the documentation for the providers in use.",
                              "default": false
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "varfile": {
                          "anyOf": [
                            {
                              "type": "string",
                              "examples": [
                                "custom.env"
                              ],
                              "description": "Specify a path (relative to the project root) to a file containing variables, that we apply on top of the\n_environment-specific_ `variables` field.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nIf you don't set the field and the `garden.<env-name>.env` file does not exist,\nwe simply ignore it. If you do override the default value and the file doesn't exist, an error will be thrown."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "variables": {
                          "anyOf": [
                            {
                              "type": "object",
                              "description": "A key/value map of variables that actions can reference when using this environment. These take precedence over variables defined in the top-level `variables` field, but may also reference the top-level variables in template strings.",
                              "additionalProperties": true
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$merge": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Merge stuff"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$if": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "If statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$else": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Else statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$then": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Then statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$forEach": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "For each statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$return": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Return statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$filter": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Filter statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$concat": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Concat lists"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "string",
                      "pattern": "^\\$\\{[^}]+\\}$"
                    }
                  ]
                }
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "providers": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$merge": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Merge stuff"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$if": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "If statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$else": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Else statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$then": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Then statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$forEach": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "For each statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$return": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Return statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$filter": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Filter statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$concat": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Concat lists"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        }
                      },
                      "allOf": [
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "container"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dockerBuildExtraFlags": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "description": "**Stability: Experimental**. Subject to breaking changes within minor releases.\n\nExtra flags to pass to the `docker build` command. Will extend the `spec.extraFlags` specified in each container Build action."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "gardenCloudBuilder": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "**Stability: Experimental**. Subject to breaking changes within minor releases.",
                                        "properties": {
                                          "enabled": {
                                            "anyOf": [
                                              {
                                                "type": "boolean",
                                                "description": "**Stability: Experimental**. Subject to breaking changes within minor releases.\n\nEnable Garden Cloud Builder, which can speed up builds significantly using fast machines and extremely fast caching.\n\nby running `GARDEN_CLOUD_BUILDER=1 garden build` you can try Garden Cloud Builder temporarily without any changes to your Garden configuration.\nThe environment variable `GARDEN_CLOUD_BUILDER` can also be used to override this setting, if enabled in the configuration. Set it to `false` or `0` to temporarily disable Garden Cloud Builder.\n\nUnder the hood, enabling this option means that Garden will install a remote buildx driver on your local Docker daemon, and use that for builds. See also https://docs.docker.com/build/drivers/remote/\n\nIf service limits are reached, or Garden Cloud Builder is not available, Garden will fall back to building images locally, or it falls back to building in your Kubernetes cluster in case in-cluster building is configured in the Kubernetes provider configuration.\n\nPlease note that when enabling Cloud Builder together with in-cluster building, you need to authenticate to your `deploymentRegistry` from the local machine (e.g. by running `docker login`).",
                                                "default": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "hadolint"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        },
                                        "default": [],
                                        "description": "List other providers that should be resolved before this one.\n\nExample: `[\"exec\"]`"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        },
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.\n\nExample: `[\"dev\",\"stage\"]`"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "autoInject": {
                                    "anyOf": [
                                      {
                                        "type": "boolean",
                                        "default": true,
                                        "description": "By default, the provider automatically creates a `hadolint` Test for every `container` Build in your\nproject. Set this to `false` to disable this behavior."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "testFailureThreshold": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "enum": [
                                          "error",
                                          "warning",
                                          "none"
                                        ],
                                        "default": "error",
                                        "description": "Set this to `\"warning\"` if you'd like tests to be marked as failed if one or more warnings are returned.\nSet to `\"none\"` to always mark the tests as successful."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "jib"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "kubernetes"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "utilImageRegistryDomain": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The container registry domain that should be used for pulling Garden utility images (such as the\nimage used in the Kubernetes sync utility Pod).\n\nIf you have your own Docker Hub registry mirror, you can set the domain here and the utility images\nwill be pulled from there. This can be useful to e.g. avoid Docker Hub rate limiting.\n\nOtherwise the utility images are pulled directly from Docker Hub by default.",
                                        "default": "docker.io"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "buildMode": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Choose the mechanism for building container images before deploying. By default your local Docker daemon is used, but you can set it to `cluster-buildkit` or `kaniko` to sync files to the cluster, and build container images there. This removes the need to run Docker locally, and allows you to share layer and image caches between multiple developers, as well as between your development and CI workflows.\n\nFor more details on all the different options and what makes sense to use for your setup, please check out the [in-cluster building guide](https://docs.garden.io/kubernetes-plugins/guides/in-cluster-building).",
                                        "default": "local-docker",
                                        "enum": [
                                          "local-docker",
                                          "kaniko",
                                          "cluster-buildkit"
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "clusterBuildkit": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Configuration options for the `cluster-buildkit` build mode.",
                                        "properties": {
                                          "cache": {
                                            "anyOf": [
                                              {
                                                "type": "array",
                                                "description": "Use the `cache` configuration to customize the default cluster-buildkit cache behaviour.\n\nThe default value is:\n```yaml\nclusterBuildkit:\n  cache:\n    - type: registry\n      mode: auto\n```\n\nFor every build, this will\n- import cached layers from a docker image tag named `_buildcache`\n- when the build is finished, upload cache information to `_buildcache`\n\nFor registries that support it, `mode: auto` (the default) will enable the buildkit `mode=max`\noption.\n\nSee the following table for details on our detection mechanism:\n\n| Registry Name                   | Registry Domain                    | Assumed `mode=max` support |\n|---------------------------------|------------------------------------|------------------------------|\n| AWS Elastic Container Registry  | `dkr.ecr.<region>.amazonaws.com` | Yes (with `image-manifest=true`) |\n| Google Cloud Artifact Registry  | `pkg.dev`                        | Yes                          |\n| Azure Container Registry        | `azurecr.io`                     | Yes                          |\n| GitHub Container Registry       | `ghcr.io`                        | Yes                          |\n| DockerHub                       | `hub.docker.com`                 | Yes                          |\n| Any other registry              |                                    | No                           |\n\nIn case you need to override the defaults for your registry, you can do it like so:\n\n```yaml\nclusterBuildkit:\n  cache:\n    - type: registry\n      mode: max\n```\n\nWhen you add multiple caches, we will make sure to pass the `--import-cache` options to buildkit in the same\norder as provided in the cache configuration. This is because buildkit will not actually use all imported caches\nfor every build, but it will stick with the first cache that yields a cache hit for all the following layers.\n\nAn example for this is the following:\n\n```yaml\nclusterBuildkit:\n  cache:\n    - type: registry\n      tag: _buildcache-${slice(kebabCase(git.branch), \"0\", \"30\")}\n    - type: registry\n      tag: _buildcache-main\n      export: false\n```\n\nUsing this cache configuration, every build will first look for a cache specific to your feature branch.\nIf it does not exist yet, it will import caches from the main branch builds (`_buildcache-main`).\nWhen the build is finished, it will only export caches to your feature branch, and avoid polluting the `main` branch caches.\nA configuration like that may improve your cache hit rate and thus save time.\n\nIf you need to disable caches completely you can achieve that with the following configuration:\n\n```yaml\nclusterBuildkit:\n  cache: []\n```",
                                                "default": [
                                                  {
                                                    "type": "registry",
                                                    "mode": "auto",
                                                    "tag": "_buildcache",
                                                    "export": true
                                                  }
                                                ],
                                                "items": {
                                                  "anyOf": [
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "type": {
                                                          "description": "Use the Docker registry configured at `deploymentRegistry` to retrieve and store buildkit cache information.\n\nSee also the [buildkit registry cache documentation](https://github.com/moby/buildkit#registry-push-image-and-cache-separately)",
                                                          "const": "registry"
                                                        },
                                                        "registry": {
                                                          "anyOf": [
                                                            {
                                                              "type": "object",
                                                              "description": "The registry from which the cache should be imported from, or which it should be exported to.\n\nIf not specified, use the configured `deploymentRegistry` in your kubernetes provider config.\n\nImportant: You must make sure `imagePullSecrets` includes authentication with the specified cache registry, that has the appropriate write privileges (usually full write access to the configured `namespace`).",
                                                              "properties": {
                                                                "hostname": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "examples": [
                                                                        "gcr.io"
                                                                      ],
                                                                      "description": "The hostname (and optionally port, if not the default port) of the registry."
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "port": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "integer",
                                                                      "description": "The port where the registry listens on, if not the default."
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "namespace": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "examples": [
                                                                        "my-project"
                                                                      ],
                                                                      "description": "The registry namespace. Will be placed between hostname and image name, like so: <hostname>/<namespace>/<image name>"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "insecure": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "boolean",
                                                                      "description": "Set to true to allow insecure connections to the registry (without SSL).",
                                                                      "default": false
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$merge": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Merge stuff"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$if": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "If statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$else": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Else statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$then": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Then statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$forEach": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "For each statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$return": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Return statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$filter": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Filter statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$concat": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Concat lists"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              "additionalProperties": false
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "mode": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "This is the buildkit cache mode to be used.\n\nThe value `inline` ensures that garden is using the buildkit option `--export-cache inline`. Cache information will be inlined and co-located with the Docker image itself.\n\nThe values `min` and `max` ensure that garden passes the `mode=max` or `mode=min` modifiers to the buildkit `--export-cache` option. Cache manifests will only be\nstored stored in the configured `tag`.\n\n`auto` is the same as `max` for some registries that are known to support it. Garden will fall back to `inline` for all other registries.\n See the [clusterBuildkit cache option](#providersclusterbuildkitcache) for a description of the detection mechanism.\n\nSee also the [buildkit export cache documentation](https://github.com/moby/buildkit#export-cache)",
                                                              "default": "auto",
                                                              "enum": [
                                                                "auto",
                                                                "min",
                                                                "max",
                                                                "inline"
                                                              ]
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "tag": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "This is the Docker registry tag name buildkit should use for the registry build cache. Default is `_buildcache`\n\n**NOTE**: `tag` can only be used together with the `registry` cache type",
                                                              "default": "_buildcache"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "export": {
                                                          "anyOf": [
                                                            {
                                                              "type": "boolean",
                                                              "description": "If this is false, only pass the `--import-cache` option to buildkit, and not the `--export-cache` option. Defaults to true.",
                                                              "default": true
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$merge": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Merge stuff"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$if": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "If statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$else": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Else statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$then": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Then statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$forEach": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "For each statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$return": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Return statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$filter": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Filter statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$concat": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Concat lists"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "rootless": {
                                            "anyOf": [
                                              {
                                                "type": "boolean",
                                                "description": "Enable rootless mode for the cluster-buildkit daemon, which runs the daemon with decreased privileges.\nPlease see [the buildkit docs](https://github.com/moby/buildkit/blob/master/docs/rootless.md) for caveats when using this mode.",
                                                "default": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "nodeSelector": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "disktype": "ssd"
                                                  }
                                                ],
                                                "description": "Exposes the `nodeSelector` field on the PodSpec of the BuildKit deployment. This allows you to constrain the BuildKit daemon to only run on particular nodes.\n\n[See here](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/) for the official Kubernetes guide to assigning Pods to nodes.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "tolerations": {
                                            "anyOf": [
                                              {
                                                "type": "array",
                                                "description": "Specify tolerations to apply to cluster-buildkit daemon. Useful to control which nodes in a cluster can run builds.",
                                                "default": []
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "annotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                  }
                                                ],
                                                "description": "Specify annotations to apply to both the Pod and Deployment resources associated with cluster-buildkit. Annotations may have an effect on the behaviour of certain components, for example autoscalers.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "serviceAccountAnnotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "eks.amazonaws.com/role-arn": "arn:aws:iam::111122223333:role/my-role"
                                                  }
                                                ],
                                                "description": "Specify annotations to apply to the Kubernetes service account used by cluster-buildkit. This can be useful to set up IRSA with in-cluster building.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "jib": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Setting related to Jib image builds.",
                                        "properties": {
                                          "pushViaCluster": {
                                            "anyOf": [
                                              {
                                                "type": "boolean",
                                                "description": "In some cases you may need to push images built with Jib to the remote registry via Kubernetes cluster, e.g. if you don't have connectivity or access from where Garden is being run. In that case, set this flag to true, but do note that the build will take considerably take longer to complete! Only applies when using in-cluster building.",
                                                "default": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "kaniko": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Configuration options for the `kaniko` build mode.",
                                        "properties": {
                                          "extraFlags": {
                                            "anyOf": [
                                              {
                                                "type": "array",
                                                "description": "Specify extra flags to use when building the container image with kaniko. Flags set on `container` Builds take precedence over these."
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "image": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Change the kaniko image (repository/image:tag) to use when building in kaniko mode.",
                                                "default": "gcr.io/kaniko-project/executor:v1.11.0-debug@sha256:32ba2214921892c2fa7b5f9c4ae6f8f026538ce6b2105a93a36a8b5ee50fe517"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "namespace": {
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "description": "Choose the namespace where the Kaniko pods will be run. Defaults to the project namespace."
                                          },
                                          "nodeSelector": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Exposes the `nodeSelector` field on the PodSpec of the Kaniko pods. This allows you to constrain the Kaniko pods to only run on particular nodes. The same nodeSelector will be used for each util pod unless they are specifically set under `util.nodeSelector`.\n\n[See here](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/) for the official Kubernetes guide to assigning pods to nodes.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "tolerations": {
                                            "anyOf": [
                                              {
                                                "type": "array",
                                                "description": "Specify tolerations to apply to each Kaniko builder pod. Useful to control which nodes in a cluster can run builds. The same tolerations will be used for each util pod unless they are specifically set under `util.tolerations`",
                                                "default": []
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "annotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                  }
                                                ],
                                                "description": "Specify annotations to apply to each Kaniko builder pod. Annotations may have an effect on the behaviour of certain components, for example autoscalers. The same annotations will be used for each util pod unless they are specifically set under `util.annotations`",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "serviceAccountAnnotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "eks.amazonaws.com/role-arn": "arn:aws:iam::111122223333:role/my-role"
                                                  }
                                                ],
                                                "description": "Specify annotations to apply to the Kubernetes service account used by kaniko. This can be useful to set up IRSA with in-cluster building.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "util": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "tolerations": {
                                                    "anyOf": [
                                                      {
                                                        "type": "array",
                                                        "description": "Specify tolerations to apply to each garden-util pod.",
                                                        "default": []
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "annotations": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "examples": [
                                                          {
                                                            "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                          }
                                                        ],
                                                        "description": "Specify annotations to apply to each garden-util pod and deployments.",
                                                        "additionalProperties": true
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "nodeSelector": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "description": "Specify the nodeSelector constraints for each garden-util pod.",
                                                        "additionalProperties": true
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "defaultHostname": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "api.mydomain.com"
                                        ],
                                        "description": "A default hostname to use when no hostname is explicitly configured for a service."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "deploymentStrategy": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Sets the deployment strategy for `container` deploy actions."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "sync": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Configuration options for code synchronization.",
                                        "properties": {
                                          "defaults": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Specifies default settings for syncs (e.g. for `container`, `kubernetes` and `helm` services).\n\nThese are overridden/extended by the settings of any individual sync specs.\n\nSync is enabled e.g by setting the `--sync` flag on the `garden deploy` command.\n\nSee the [Code Synchronization guide](https://docs.garden.io/guides/code-synchronization) for more information.",
                                                "properties": {
                                                  "exclude": {
                                                    "anyOf": [
                                                      {
                                                        "type": "array",
                                                        "examples": [
                                                          [
                                                            "dist/**/*",
                                                            "*.log"
                                                          ]
                                                        ],
                                                        "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\nAny exclusion patterns defined in individual sync specs will be applied in addition to these patterns.\n\n`.git` directories and `.garden` directories are always ignored.",
                                                        "items": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "fileMode": {
                                                    "anyOf": [
                                                      {
                                                        "type": "number",
                                                        "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                        "default": 420,
                                                        "minimum": 0,
                                                        "maximum": 511
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "directoryMode": {
                                                    "anyOf": [
                                                      {
                                                        "type": "number",
                                                        "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                        "default": 493,
                                                        "minimum": 0,
                                                        "maximum": 511
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "owner": {
                                                    "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                                    "anyOf": [
                                                      {
                                                        "type": "integer"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  },
                                                  "group": {
                                                    "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                                    "anyOf": [
                                                      {
                                                        "type": "integer"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "forceSsl": {
                                    "anyOf": [
                                      {
                                        "type": "boolean",
                                        "description": "Require SSL on all `container` Deploys. If set to true, an error is raised when no certificate is available for a configured hostname on a `container`Deploy.",
                                        "default": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "gardenSystemNamespace": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Override the garden-system namespace name. This option is mainly used for testing.\nIn most cases you should leave the default value.",
                                        "default": "garden-system"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "imagePullSecrets": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "description": "References to `docker-registry` secrets to use for authenticating with remote registries when pulling\nimages. This is necessary if you reference private images in your action configuration, and is required\nwhen configuring a remote Kubernetes environment with buildMode=local.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "copySecrets": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "description": "References to secrets you need to have copied into all namespaces deployed to. These secrets will be\nensured to exist in the namespace before deploying any service.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Resource requests and limits for the in-cluster builder..",
                                        "default": {
                                          "builder": {
                                            "limits": {
                                              "cpu": 4000,
                                              "memory": 8192
                                            },
                                            "requests": {
                                              "cpu": 100,
                                              "memory": 512
                                            }
                                          },
                                          "sync": {
                                            "limits": {
                                              "cpu": 500,
                                              "memory": 512
                                            },
                                            "requests": {
                                              "cpu": 100,
                                              "memory": 90
                                            }
                                          },
                                          "util": {
                                            "limits": {
                                              "cpu": 256,
                                              "memory": 512
                                            },
                                            "requests": {
                                              "cpu": 256,
                                              "memory": 512
                                            }
                                          }
                                        },
                                        "properties": {
                                          "builder": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Resource requests and limits for the in-cluster builder. It's important to consider which build mode you're using when configuring this.\n\nWhen `buildMode` is `kaniko`, this refers to _each Kaniko pod_, i.e. each individual build, so you'll want to consider the requirements for your individual image builds, with your most expensive/heavy images in mind.\n\nWhen `buildMode` is `cluster-buildkit`, this applies to the BuildKit deployment created in _each project namespace_. So think of this as the resource spec for each individual user or project namespace.",
                                                "default": {
                                                  "limits": {
                                                    "cpu": 4000,
                                                    "memory": 8192
                                                  },
                                                  "requests": {
                                                    "cpu": 100,
                                                    "memory": 512
                                                  }
                                                },
                                                "properties": {
                                                  "limits": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 4000,
                                                          "memory": 8192
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  4000
                                                                ],
                                                                "description": "CPU limit in millicpu.",
                                                                "default": 4000
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Memory limit in megabytes.",
                                                                "default": 8192
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage limit in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "requests": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 100,
                                                          "memory": 512
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  100
                                                                ],
                                                                "description": "CPU request in millicpu.",
                                                                "default": 100
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  512
                                                                ],
                                                                "description": "Memory request in megabytes.",
                                                                "default": 512
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage request in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "util": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Resource requests and limits for the util pod for in-cluster builders.\nThis pod is used to get, start, stop and inquire the status of the builds.\n\nThis pod is created in each garden namespace.",
                                                "default": {
                                                  "limits": {
                                                    "cpu": 256,
                                                    "memory": 512
                                                  },
                                                  "requests": {
                                                    "cpu": 256,
                                                    "memory": 512
                                                  }
                                                },
                                                "properties": {
                                                  "limits": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 256,
                                                          "memory": 512
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  256
                                                                ],
                                                                "description": "CPU limit in millicpu.",
                                                                "default": 256
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  512
                                                                ],
                                                                "description": "Memory limit in megabytes.",
                                                                "default": 512
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage limit in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "requests": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 256,
                                                          "memory": 512
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  256
                                                                ],
                                                                "description": "CPU request in millicpu.",
                                                                "default": 256
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  512
                                                                ],
                                                                "description": "Memory request in megabytes.",
                                                                "default": 512
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage request in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "sync": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Resource requests and limits for the code sync service, which we use to sync build contexts to the cluster\nahead of building images. This generally is not resource intensive, but you might want to adjust the\ndefaults if you have many concurrent users.",
                                                "default": {
                                                  "limits": {
                                                    "cpu": 500,
                                                    "memory": 512
                                                  },
                                                  "requests": {
                                                    "cpu": 100,
                                                    "memory": 90
                                                  }
                                                },
                                                "properties": {
                                                  "limits": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 500,
                                                          "memory": 512
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  500
                                                                ],
                                                                "description": "CPU limit in millicpu.",
                                                                "default": 500
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  512
                                                                ],
                                                                "description": "Memory limit in megabytes.",
                                                                "default": 512
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage limit in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "requests": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 100,
                                                          "memory": 90
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  100
                                                                ],
                                                                "description": "CPU request in millicpu.",
                                                                "default": 100
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  90
                                                                ],
                                                                "description": "Memory request in megabytes.",
                                                                "default": 90
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage request in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "tlsCertificates": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "description": "One or more certificates to use for ingress.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "systemNodeSelector": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "examples": [
                                          {
                                            "disktype": "ssd"
                                          }
                                        ],
                                        "description": "Exposes the `nodeSelector` field on the PodSpec of system services. This allows you to constrain the system services to only run on particular nodes.\n\n[See here](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/) for the official Kubernetes guide to assigning Pods to nodes.",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use.",
                                        "default": "kubernetes"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "context": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "my-dev-context"
                                        ],
                                        "description": "The kubectl context to use to connect to the Kubernetes cluster."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "deploymentRegistry": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "The registry where built containers should be pushed to, and then pulled to the cluster when deploying services.\n\nImportant: If you specify this in combination with in-cluster building, you must make sure `imagePullSecrets` includes authentication with the specified deployment registry, that has the appropriate write privileges (usually full write access to the configured `deploymentRegistry.namespace`).",
                                        "properties": {
                                          "hostname": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "examples": [
                                                  "gcr.io"
                                                ],
                                                "description": "The hostname (and optionally port, if not the default port) of the registry."
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "port": {
                                            "anyOf": [
                                              {
                                                "type": "integer",
                                                "description": "The port where the registry listens on, if not the default."
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "namespace": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "examples": [
                                                  "my-project"
                                                ],
                                                "description": "The registry namespace. Will be placed between hostname and image name, like so: <hostname>/<namespace>/<image name>"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "insecure": {
                                            "anyOf": [
                                              {
                                                "type": "boolean",
                                                "description": "Set to true to allow insecure connections to the registry (without SSL).",
                                                "default": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "ingressClass": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The ingress class or ingressClassName to use on configured Ingresses (via the `kubernetes.io/ingress.class` annotation or `spec.ingressClassName` field depending on the kubernetes version)\nwhen deploying `container` services. Use this if you have multiple ingress controllers in your cluster."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "ingressHttpPort": {
                                    "anyOf": [
                                      {
                                        "type": "number",
                                        "description": "The external HTTP port of the cluster's ingress controller.",
                                        "default": 80
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "ingressHttpsPort": {
                                    "anyOf": [
                                      {
                                        "type": "number",
                                        "description": "The external HTTPS port of the cluster's ingress controller.",
                                        "default": 443
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "kubeconfig": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Path to kubeconfig file to use instead of the system default."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "kubectlPath": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Set a specific path to a kubectl binary, instead of having Garden download it automatically as required.\n\nIt may be useful in some scenarios to allow individual users to set this, e.g. with an environment variable. You could configure that with something like `kubectlPath: ${local.env.GARDEN_KUBECTL_PATH}?`.\n\n**Warning**: Garden may make some assumptions with respect to the kubectl version, so it is suggested to only use this when necessary."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "namespace": {
                                    "description": "Specify which namespace to deploy services to, and optionally annotations/labels to apply to the namespace.\n\nYou can specify a string as a shorthand for `name: <name>`. Defaults to `<project name>-<environment namespace>`.\n\nNote that the framework may generate other namespaces as well with this name as a prefix. Also note that if the namespace previously exists, Garden will attempt to add the specified labels and annotations. If the user does not have permissions to do so, a warning is shown.",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                                                "maxLength": 63
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "annotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                  }
                                                ],
                                                "description": "Map of annotations to apply to the namespace when creating it.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "labels": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Map of labels to apply to the namespace when creating it.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                                        "maxLength": 63
                                      }
                                    ]
                                  },
                                  "setupIngressController": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "Set this to `nginx` to install/enable the NGINX ingress controller.",
                                    "default": false
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "local-kubernetes"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "description": "The provider configuration for the local-kubernetes plugin.",
                                "properties": {
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "utilImageRegistryDomain": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The container registry domain that should be used for pulling Garden utility images (such as the\nimage used in the Kubernetes sync utility Pod).\n\nIf you have your own Docker Hub registry mirror, you can set the domain here and the utility images\nwill be pulled from there. This can be useful to e.g. avoid Docker Hub rate limiting.\n\nOtherwise the utility images are pulled directly from Docker Hub by default.",
                                        "default": "docker.io"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "buildMode": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Choose the mechanism for building container images before deploying. By default your local Docker daemon is used, but you can set it to `cluster-buildkit` or `kaniko` to sync files to the cluster, and build container images there. This removes the need to run Docker locally, and allows you to share layer and image caches between multiple developers, as well as between your development and CI workflows.\n\nFor more details on all the different options and what makes sense to use for your setup, please check out the [in-cluster building guide](https://docs.garden.io/kubernetes-plugins/guides/in-cluster-building).",
                                        "default": "local-docker",
                                        "enum": [
                                          "local-docker",
                                          "kaniko",
                                          "cluster-buildkit"
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "clusterBuildkit": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Configuration options for the `cluster-buildkit` build mode.",
                                        "properties": {
                                          "cache": {
                                            "anyOf": [
                                              {
                                                "type": "array",
                                                "description": "Use the `cache` configuration to customize the default cluster-buildkit cache behaviour.\n\nThe default value is:\n```yaml\nclusterBuildkit:\n  cache:\n    - type: registry\n      mode: auto\n```\n\nFor every build, this will\n- import cached layers from a docker image tag named `_buildcache`\n- when the build is finished, upload cache information to `_buildcache`\n\nFor registries that support it, `mode: auto` (the default) will enable the buildkit `mode=max`\noption.\n\nSee the following table for details on our detection mechanism:\n\n| Registry Name                   | Registry Domain                    | Assumed `mode=max` support |\n|---------------------------------|------------------------------------|------------------------------|\n| AWS Elastic Container Registry  | `dkr.ecr.<region>.amazonaws.com` | Yes (with `image-manifest=true`) |\n| Google Cloud Artifact Registry  | `pkg.dev`                        | Yes                          |\n| Azure Container Registry        | `azurecr.io`                     | Yes                          |\n| GitHub Container Registry       | `ghcr.io`                        | Yes                          |\n| DockerHub                       | `hub.docker.com`                 | Yes                          |\n| Any other registry              |                                    | No                           |\n\nIn case you need to override the defaults for your registry, you can do it like so:\n\n```yaml\nclusterBuildkit:\n  cache:\n    - type: registry\n      mode: max\n```\n\nWhen you add multiple caches, we will make sure to pass the `--import-cache` options to buildkit in the same\norder as provided in the cache configuration. This is because buildkit will not actually use all imported caches\nfor every build, but it will stick with the first cache that yields a cache hit for all the following layers.\n\nAn example for this is the following:\n\n```yaml\nclusterBuildkit:\n  cache:\n    - type: registry\n      tag: _buildcache-${slice(kebabCase(git.branch), \"0\", \"30\")}\n    - type: registry\n      tag: _buildcache-main\n      export: false\n```\n\nUsing this cache configuration, every build will first look for a cache specific to your feature branch.\nIf it does not exist yet, it will import caches from the main branch builds (`_buildcache-main`).\nWhen the build is finished, it will only export caches to your feature branch, and avoid polluting the `main` branch caches.\nA configuration like that may improve your cache hit rate and thus save time.\n\nIf you need to disable caches completely you can achieve that with the following configuration:\n\n```yaml\nclusterBuildkit:\n  cache: []\n```",
                                                "default": [
                                                  {
                                                    "type": "registry",
                                                    "mode": "auto",
                                                    "tag": "_buildcache",
                                                    "export": true
                                                  }
                                                ],
                                                "items": {
                                                  "anyOf": [
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "type": {
                                                          "description": "Use the Docker registry configured at `deploymentRegistry` to retrieve and store buildkit cache information.\n\nSee also the [buildkit registry cache documentation](https://github.com/moby/buildkit#registry-push-image-and-cache-separately)",
                                                          "const": "registry"
                                                        },
                                                        "registry": {
                                                          "anyOf": [
                                                            {
                                                              "type": "object",
                                                              "description": "The registry from which the cache should be imported from, or which it should be exported to.\n\nIf not specified, use the configured `deploymentRegistry` in your kubernetes provider config.\n\nImportant: You must make sure `imagePullSecrets` includes authentication with the specified cache registry, that has the appropriate write privileges (usually full write access to the configured `namespace`).",
                                                              "properties": {
                                                                "hostname": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "examples": [
                                                                        "gcr.io"
                                                                      ],
                                                                      "description": "The hostname (and optionally port, if not the default port) of the registry."
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "port": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "integer",
                                                                      "description": "The port where the registry listens on, if not the default."
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "namespace": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "examples": [
                                                                        "my-project"
                                                                      ],
                                                                      "description": "The registry namespace. Will be placed between hostname and image name, like so: <hostname>/<namespace>/<image name>"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "insecure": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "boolean",
                                                                      "description": "Set to true to allow insecure connections to the registry (without SSL).",
                                                                      "default": false
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$merge": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Merge stuff"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$if": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "If statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$else": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Else statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$then": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Then statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$forEach": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "For each statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$return": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Return statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$filter": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Filter statements"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                },
                                                                "$concat": {
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "string",
                                                                      "description": "Concat lists"
                                                                    },
                                                                    {
                                                                      "type": "string",
                                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              "additionalProperties": false
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "mode": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "This is the buildkit cache mode to be used.\n\nThe value `inline` ensures that garden is using the buildkit option `--export-cache inline`. Cache information will be inlined and co-located with the Docker image itself.\n\nThe values `min` and `max` ensure that garden passes the `mode=max` or `mode=min` modifiers to the buildkit `--export-cache` option. Cache manifests will only be\nstored stored in the configured `tag`.\n\n`auto` is the same as `max` for some registries that are known to support it. Garden will fall back to `inline` for all other registries.\n See the [clusterBuildkit cache option](#providersclusterbuildkitcache) for a description of the detection mechanism.\n\nSee also the [buildkit export cache documentation](https://github.com/moby/buildkit#export-cache)",
                                                              "default": "auto",
                                                              "enum": [
                                                                "auto",
                                                                "min",
                                                                "max",
                                                                "inline"
                                                              ]
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "tag": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "This is the Docker registry tag name buildkit should use for the registry build cache. Default is `_buildcache`\n\n**NOTE**: `tag` can only be used together with the `registry` cache type",
                                                              "default": "_buildcache"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "export": {
                                                          "anyOf": [
                                                            {
                                                              "type": "boolean",
                                                              "description": "If this is false, only pass the `--import-cache` option to buildkit, and not the `--export-cache` option. Defaults to true.",
                                                              "default": true
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$merge": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Merge stuff"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$if": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "If statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$else": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Else statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$then": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Then statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$forEach": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "For each statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$return": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Return statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$filter": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Filter statements"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        },
                                                        "$concat": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string",
                                                              "description": "Concat lists"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "additionalProperties": false
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "rootless": {
                                            "anyOf": [
                                              {
                                                "type": "boolean",
                                                "description": "Enable rootless mode for the cluster-buildkit daemon, which runs the daemon with decreased privileges.\nPlease see [the buildkit docs](https://github.com/moby/buildkit/blob/master/docs/rootless.md) for caveats when using this mode.",
                                                "default": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "nodeSelector": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "disktype": "ssd"
                                                  }
                                                ],
                                                "description": "Exposes the `nodeSelector` field on the PodSpec of the BuildKit deployment. This allows you to constrain the BuildKit daemon to only run on particular nodes.\n\n[See here](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/) for the official Kubernetes guide to assigning Pods to nodes.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "tolerations": {
                                            "anyOf": [
                                              {
                                                "type": "array",
                                                "description": "Specify tolerations to apply to cluster-buildkit daemon. Useful to control which nodes in a cluster can run builds.",
                                                "default": []
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "annotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                  }
                                                ],
                                                "description": "Specify annotations to apply to both the Pod and Deployment resources associated with cluster-buildkit. Annotations may have an effect on the behaviour of certain components, for example autoscalers.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "serviceAccountAnnotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "eks.amazonaws.com/role-arn": "arn:aws:iam::111122223333:role/my-role"
                                                  }
                                                ],
                                                "description": "Specify annotations to apply to the Kubernetes service account used by cluster-buildkit. This can be useful to set up IRSA with in-cluster building.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "jib": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Setting related to Jib image builds.",
                                        "properties": {
                                          "pushViaCluster": {
                                            "anyOf": [
                                              {
                                                "type": "boolean",
                                                "description": "In some cases you may need to push images built with Jib to the remote registry via Kubernetes cluster, e.g. if you don't have connectivity or access from where Garden is being run. In that case, set this flag to true, but do note that the build will take considerably take longer to complete! Only applies when using in-cluster building.",
                                                "default": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "kaniko": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Configuration options for the `kaniko` build mode.",
                                        "properties": {
                                          "extraFlags": {
                                            "anyOf": [
                                              {
                                                "type": "array",
                                                "description": "Specify extra flags to use when building the container image with kaniko. Flags set on `container` Builds take precedence over these."
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "image": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Change the kaniko image (repository/image:tag) to use when building in kaniko mode.",
                                                "default": "gcr.io/kaniko-project/executor:v1.11.0-debug@sha256:32ba2214921892c2fa7b5f9c4ae6f8f026538ce6b2105a93a36a8b5ee50fe517"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "namespace": {
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "description": "Choose the namespace where the Kaniko pods will be run. Defaults to the project namespace."
                                          },
                                          "nodeSelector": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Exposes the `nodeSelector` field on the PodSpec of the Kaniko pods. This allows you to constrain the Kaniko pods to only run on particular nodes. The same nodeSelector will be used for each util pod unless they are specifically set under `util.nodeSelector`.\n\n[See here](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/) for the official Kubernetes guide to assigning pods to nodes.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "tolerations": {
                                            "anyOf": [
                                              {
                                                "type": "array",
                                                "description": "Specify tolerations to apply to each Kaniko builder pod. Useful to control which nodes in a cluster can run builds. The same tolerations will be used for each util pod unless they are specifically set under `util.tolerations`",
                                                "default": []
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "annotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                  }
                                                ],
                                                "description": "Specify annotations to apply to each Kaniko builder pod. Annotations may have an effect on the behaviour of certain components, for example autoscalers. The same annotations will be used for each util pod unless they are specifically set under `util.annotations`",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "serviceAccountAnnotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "eks.amazonaws.com/role-arn": "arn:aws:iam::111122223333:role/my-role"
                                                  }
                                                ],
                                                "description": "Specify annotations to apply to the Kubernetes service account used by kaniko. This can be useful to set up IRSA with in-cluster building.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "util": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "tolerations": {
                                                    "anyOf": [
                                                      {
                                                        "type": "array",
                                                        "description": "Specify tolerations to apply to each garden-util pod.",
                                                        "default": []
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "annotations": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "examples": [
                                                          {
                                                            "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                          }
                                                        ],
                                                        "description": "Specify annotations to apply to each garden-util pod and deployments.",
                                                        "additionalProperties": true
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "nodeSelector": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "description": "Specify the nodeSelector constraints for each garden-util pod.",
                                                        "additionalProperties": true
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "defaultHostname": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "api.mydomain.com"
                                        ],
                                        "description": "A default hostname to use when no hostname is explicitly configured for a service."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "deploymentStrategy": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Sets the deployment strategy for `container` deploy actions."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "sync": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Configuration options for code synchronization.",
                                        "properties": {
                                          "defaults": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Specifies default settings for syncs (e.g. for `container`, `kubernetes` and `helm` services).\n\nThese are overridden/extended by the settings of any individual sync specs.\n\nSync is enabled e.g by setting the `--sync` flag on the `garden deploy` command.\n\nSee the [Code Synchronization guide](https://docs.garden.io/guides/code-synchronization) for more information.",
                                                "properties": {
                                                  "exclude": {
                                                    "anyOf": [
                                                      {
                                                        "type": "array",
                                                        "examples": [
                                                          [
                                                            "dist/**/*",
                                                            "*.log"
                                                          ]
                                                        ],
                                                        "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\nAny exclusion patterns defined in individual sync specs will be applied in addition to these patterns.\n\n`.git` directories and `.garden` directories are always ignored.",
                                                        "items": {
                                                          "anyOf": [
                                                            {
                                                              "type": "string"
                                                            },
                                                            {
                                                              "type": "string",
                                                              "pattern": "^\\$\\{[^}]+\\}$"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "fileMode": {
                                                    "anyOf": [
                                                      {
                                                        "type": "number",
                                                        "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                        "default": 420,
                                                        "minimum": 0,
                                                        "maximum": 511
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "directoryMode": {
                                                    "anyOf": [
                                                      {
                                                        "type": "number",
                                                        "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                        "default": 493,
                                                        "minimum": 0,
                                                        "maximum": 511
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "owner": {
                                                    "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                                    "anyOf": [
                                                      {
                                                        "type": "integer"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  },
                                                  "group": {
                                                    "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                                    "anyOf": [
                                                      {
                                                        "type": "integer"
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "forceSsl": {
                                    "anyOf": [
                                      {
                                        "type": "boolean",
                                        "description": "Require SSL on all `container` Deploys. If set to true, an error is raised when no certificate is available for a configured hostname on a `container`Deploy.",
                                        "default": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "gardenSystemNamespace": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Override the garden-system namespace name. This option is mainly used for testing.\nIn most cases you should leave the default value.",
                                        "default": "garden-system"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "imagePullSecrets": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "description": "References to `docker-registry` secrets to use for authenticating with remote registries when pulling\nimages. This is necessary if you reference private images in your action configuration, and is required\nwhen configuring a remote Kubernetes environment with buildMode=local.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "copySecrets": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "description": "References to secrets you need to have copied into all namespaces deployed to. These secrets will be\nensured to exist in the namespace before deploying any service.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "Resource requests and limits for the in-cluster builder..",
                                        "default": {
                                          "builder": {
                                            "limits": {
                                              "cpu": 4000,
                                              "memory": 8192
                                            },
                                            "requests": {
                                              "cpu": 100,
                                              "memory": 512
                                            }
                                          },
                                          "sync": {
                                            "limits": {
                                              "cpu": 500,
                                              "memory": 512
                                            },
                                            "requests": {
                                              "cpu": 100,
                                              "memory": 90
                                            }
                                          },
                                          "util": {
                                            "limits": {
                                              "cpu": 256,
                                              "memory": 512
                                            },
                                            "requests": {
                                              "cpu": 256,
                                              "memory": 512
                                            }
                                          }
                                        },
                                        "properties": {
                                          "builder": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Resource requests and limits for the in-cluster builder. It's important to consider which build mode you're using when configuring this.\n\nWhen `buildMode` is `kaniko`, this refers to _each Kaniko pod_, i.e. each individual build, so you'll want to consider the requirements for your individual image builds, with your most expensive/heavy images in mind.\n\nWhen `buildMode` is `cluster-buildkit`, this applies to the BuildKit deployment created in _each project namespace_. So think of this as the resource spec for each individual user or project namespace.",
                                                "default": {
                                                  "limits": {
                                                    "cpu": 4000,
                                                    "memory": 8192
                                                  },
                                                  "requests": {
                                                    "cpu": 100,
                                                    "memory": 512
                                                  }
                                                },
                                                "properties": {
                                                  "limits": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 4000,
                                                          "memory": 8192
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  4000
                                                                ],
                                                                "description": "CPU limit in millicpu.",
                                                                "default": 4000
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Memory limit in megabytes.",
                                                                "default": 8192
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage limit in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "requests": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 100,
                                                          "memory": 512
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  100
                                                                ],
                                                                "description": "CPU request in millicpu.",
                                                                "default": 100
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  512
                                                                ],
                                                                "description": "Memory request in megabytes.",
                                                                "default": 512
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage request in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "util": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Resource requests and limits for the util pod for in-cluster builders.\nThis pod is used to get, start, stop and inquire the status of the builds.\n\nThis pod is created in each garden namespace.",
                                                "default": {
                                                  "limits": {
                                                    "cpu": 256,
                                                    "memory": 512
                                                  },
                                                  "requests": {
                                                    "cpu": 256,
                                                    "memory": 512
                                                  }
                                                },
                                                "properties": {
                                                  "limits": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 256,
                                                          "memory": 512
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  256
                                                                ],
                                                                "description": "CPU limit in millicpu.",
                                                                "default": 256
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  512
                                                                ],
                                                                "description": "Memory limit in megabytes.",
                                                                "default": 512
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage limit in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "requests": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 256,
                                                          "memory": 512
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  256
                                                                ],
                                                                "description": "CPU request in millicpu.",
                                                                "default": 256
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  512
                                                                ],
                                                                "description": "Memory request in megabytes.",
                                                                "default": 512
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage request in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "sync": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Resource requests and limits for the code sync service, which we use to sync build contexts to the cluster\nahead of building images. This generally is not resource intensive, but you might want to adjust the\ndefaults if you have many concurrent users.",
                                                "default": {
                                                  "limits": {
                                                    "cpu": 500,
                                                    "memory": 512
                                                  },
                                                  "requests": {
                                                    "cpu": 100,
                                                    "memory": 90
                                                  }
                                                },
                                                "properties": {
                                                  "limits": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 500,
                                                          "memory": 512
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  500
                                                                ],
                                                                "description": "CPU limit in millicpu.",
                                                                "default": 500
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  512
                                                                ],
                                                                "description": "Memory limit in megabytes.",
                                                                "default": 512
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage limit in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "requests": {
                                                    "anyOf": [
                                                      {
                                                        "type": "object",
                                                        "default": {
                                                          "cpu": 100,
                                                          "memory": 90
                                                        },
                                                        "properties": {
                                                          "cpu": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  100
                                                                ],
                                                                "description": "CPU request in millicpu.",
                                                                "default": 100
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "memory": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  90
                                                                ],
                                                                "description": "Memory request in megabytes.",
                                                                "default": 90
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "ephemeralStorage": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer",
                                                                "examples": [
                                                                  8192
                                                                ],
                                                                "description": "Ephemeral storage request in megabytes."
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$merge": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Merge stuff"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$if": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "If statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$else": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Else statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$then": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Then statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$forEach": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "For each statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$return": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Return statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$filter": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Filter statements"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          },
                                                          "$concat": {
                                                            "anyOf": [
                                                              {
                                                                "type": "string",
                                                                "description": "Concat lists"
                                                              },
                                                              {
                                                                "type": "string",
                                                                "pattern": "^\\$\\{[^}]+\\}$"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$merge": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Merge stuff"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$if": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "If statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$else": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Else statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$then": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Then statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$forEach": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "For each statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$return": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Return statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$filter": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Filter statements"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  },
                                                  "$concat": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string",
                                                        "description": "Concat lists"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$merge": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Merge stuff"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$if": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "If statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$else": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Else statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$then": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Then statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$forEach": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "For each statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$return": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Return statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$filter": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Filter statements"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "$concat": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "Concat lists"
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "tlsCertificates": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "description": "One or more certificates to use for ingress.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "systemNodeSelector": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "examples": [
                                          {
                                            "disktype": "ssd"
                                          }
                                        ],
                                        "description": "Exposes the `nodeSelector` field on the PodSpec of system services. This allows you to constrain the system services to only run on particular nodes.\n\n[See here](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/) for the official Kubernetes guide to assigning Pods to nodes.",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use.",
                                        "default": "local-kubernetes"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "context": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "my-dev-context"
                                        ],
                                        "description": "The kubectl context to use to connect to the Kubernetes cluster."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "namespace": {
                                    "description": "Specify which namespace to deploy services to (defaults to the project name). Note that the framework generates other namespaces as well with this name as a prefix.",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                                                "maxLength": 63
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "annotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                  }
                                                ],
                                                "description": "Map of annotations to apply to the namespace when creating it.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "labels": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Map of labels to apply to the namespace when creating it.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                                        "maxLength": 63
                                      }
                                    ]
                                  },
                                  "setupIngressController": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "Set this to null or false to skip installing/enabling the `nginx` ingress controller.",
                                    "default": "nginx"
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": true
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "ephemeral-kubernetes"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "description": "The provider configuration for the ephemeral-kubernetes plugin.",
                                "properties": {
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "ephemeral-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use.",
                                        "default": "ephemeral-kubernetes"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "utilImageRegistryDomain": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The container registry domain that should be used for pulling Garden utility images (such as the\nimage used in the Kubernetes sync utility Pod).\n\nIf you have your own Docker Hub registry mirror, you can set the domain here and the utility images\nwill be pulled from there. This can be useful to e.g. avoid Docker Hub rate limiting.\n\nOtherwise the utility images are pulled directly from Docker Hub by default.",
                                        "default": "docker.io"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "namespace": {
                                    "description": "Specify which namespace to deploy services to (defaults to the project name). Note that the framework generates other namespaces as well with this name as a prefix.",
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                                                "maxLength": 63
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "annotations": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "examples": [
                                                  {
                                                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
                                                  }
                                                ],
                                                "description": "Map of annotations to apply to the namespace when creating it.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          },
                                          "labels": {
                                            "anyOf": [
                                              {
                                                "type": "object",
                                                "description": "Map of labels to apply to the namespace when creating it.",
                                                "additionalProperties": true
                                              },
                                              {
                                                "type": "string",
                                                "pattern": "^\\$\\{[^}]+\\}$"
                                              }
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      {
                                        "type": "string",
                                        "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                                        "maxLength": 63
                                      }
                                    ]
                                  },
                                  "setupIngressController": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "Set this to null or false to skip installing/enabling the `nginx` ingress controller. Note: if you skip installing the `nginx` ingress controller for ephemeral cluster, your ingresses may not function properly.",
                                    "default": "nginx"
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": true
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "octant"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": true
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "exec"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        },
                                        "default": [],
                                        "description": "List other providers that should be resolved before this one.\n\nExample: `[\"exec\"]`"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        },
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.\n\nExample: `[\"dev\",\"stage\"]`"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "initScript": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "An optional script to run in the project root when initializing providers. This is handy for running an arbitrary\nscript when initializing. For example, another provider might declare a dependency on this provider, to ensure\nthis script runs before resolving that provider."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "otel-collector"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        },
                                        "default": [],
                                        "description": "List other providers that should be resolved before this one.\n\nExample: `[\"exec\"]`"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        },
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.\n\nExample: `[\"dev\",\"stage\"]`"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "exporters": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "const": "logging"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "enabled": {
                                                  "anyOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "verbosity": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "enum": [
                                                        "detailed",
                                                        "normal",
                                                        "basic"
                                                      ],
                                                      "default": "normal"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "const": "otlphttp"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "enabled": {
                                                  "anyOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "endpoint": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "format": "uri-reference"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "headers": {
                                                  "anyOf": [
                                                    {
                                                      "type": "object",
                                                      "additionalProperties": {
                                                        "anyOf": [
                                                          {
                                                            "type": "number"
                                                          },
                                                          {
                                                            "type": "string",
                                                            "minLength": 1
                                                          },
                                                          {}
                                                        ]
                                                      },
                                                      "propertyNames": {
                                                        "minLength": 1
                                                      }
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "const": "newrelic"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "enabled": {
                                                  "anyOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "endpoint": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "format": "uri-reference",
                                                      "default": "https://otlp.nr-data.net:4318"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "apiKey": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "const": "datadog"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "enabled": {
                                                  "anyOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "site": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "minLength": 1,
                                                      "default": "datadoghq.com"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "apiKey": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "const": "honeycomb"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "enabled": {
                                                  "anyOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "endpoint": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "format": "uri-reference",
                                                      "default": "https://api.honeycomb.io"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "apiKey": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                },
                                                "dataset": {
                                                  "anyOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "pattern": "^\\$\\{[^}]+\\}$"
                                                    }
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "conftest"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "policyPath": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Path to the default policy directory or rego file to use for `conftest` actions.",
                                        "default": "./policy"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "namespace": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Default policy namespace to use for `conftest` actions."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "testFailureThreshold": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Set this to `\"warn\"` if you'd like tests to be marked as failed if one or more _warn_ rules are matched.\nSet to `\"none\"` to always mark the tests as successful.",
                                        "default": "error"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "conftest-container"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "policyPath": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Path to the default policy directory or rego file to use for `conftest` actions.",
                                        "default": "./policy"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "namespace": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Default policy namespace to use for `conftest` actions."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "testFailureThreshold": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Set this to `\"warn\"` if you'd like tests to be marked as failed if one or more _warn_ rules are matched.\nSet to `\"none\"` to always mark the tests as successful.",
                                        "default": "error"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "conftest-kubernetes"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "policyPath": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Path to the default policy directory or rego file to use for `conftest` actions.",
                                        "default": "./policy"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "namespace": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Default policy namespace to use for `conftest` actions."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "testFailureThreshold": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Set this to `\"warn\"` if you'd like tests to be marked as failed if one or more _warn_ rules are matched.\nSet to `\"none\"` to always mark the tests as successful.",
                                        "default": "error"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "terraform"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "allowDestroy": {
                                    "anyOf": [
                                      {
                                        "type": "boolean",
                                        "description": "If set to true, Garden will run `terraform destroy` on the project root stack when calling `garden delete env`.",
                                        "default": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "autoApply": {
                                    "anyOf": [
                                      {
                                        "type": "boolean",
                                        "description": "If set to true, Garden will automatically run `terraform apply -auto-approve` when a stack is not up-to-date. Otherwise, a warning is logged if the stack is out-of-date, and an error thrown if it is missing entirely.\n\n**Note: This is not recommended for production, or shared environments in general!**",
                                        "default": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "initRoot": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Specify the path to a Terraform config directory, that should be resolved when initializing the provider. This is useful when other providers need to be able to reference the outputs from the stack.\n\nSee the [Terraform guide](https://docs.garden.io/advanced/terraform) for more information."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "variables": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "description": "A map of variables to use when applying Terraform stacks. You can define these here, in individual\n`terraform` action configs, or you can place a `terraform.tfvars` file in each working directory.",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "version": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The version of Terraform to use. Set to `null` to use whichever version of `terraform` that is on your PATH.",
                                    "default": "1.4.6",
                                    "enum": [
                                      "0.12.26",
                                      "0.13.3",
                                      "0.14.7",
                                      "1.0.5",
                                      "1.2.9",
                                      "1.4.6",
                                      null
                                    ]
                                  },
                                  "workspace": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Use the specified Terraform workspace."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "streamLogsToCloud": {
                                    "anyOf": [
                                      {
                                        "type": "boolean",
                                        "description": "Set to `true` to make logs from Terraform Deploy actions visible in Garden Cloud/Enterprise. Defaults to `false`",
                                        "default": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "backendConfig": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "examples": [
                                          "bucket: ${environment.name\\}-bucket\nkey: tf-state/${local.username\\}/terraform.tfstate"
                                        ],
                                        "description": "Configure the Terraform backend.\n\nThe key-value pairs defined here are set as the `-backend-config` options when Garden\nruns `terraform init`.\n\nThis can be used to dynamically set a Terraform backend depending on the environment.\n\nIf Garden sees that the backend has changes, it'll re-initialize Terraform and set the new values.",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        {
                          "if": {
                            "properties": {
                              "name": {
                                "const": "pulumi"
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            }
                          },
                          "then": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "examples": [
                                          "local-kubernetes"
                                        ],
                                        "description": "The name of the provider plugin to use."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "dependencies": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "exec"
                                          ]
                                        ],
                                        "description": "List other providers that should be resolved before this one.",
                                        "default": []
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "environments": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "examples": [
                                          [
                                            "dev",
                                            "stage"
                                          ]
                                        ],
                                        "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
                                        "items": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters."
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\$\\{[^}]+\\}$"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "version": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "The version of pulumi to use. Set to `null` to use whichever version of `pulumi` is on your PATH.",
                                    "default": "3.122.0",
                                    "enum": [
                                      "3.122.0",
                                      "3.102.0",
                                      "3.70.0",
                                      "3.64.0",
                                      null
                                    ]
                                  },
                                  "previewDir": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Overrides the default plan directory path used when deploying with the `deployFromPreview` option for pulumi\ndeploy actions.\n\nMust be a relative path to a directory inside the project root.\n\nThis option can be useful when you want to provide a folder of pre-approved pulumi plans to a CI pipeline step."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "orgName": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The name of the pulumi organization to use. This option can also be set on the deploy action level, in which case it\noverrides this provider-level option. Note that setting the organization name is only necessary when using\npulumi managed backend with an organization."
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "backendURL": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "The URL of the state backend endpoint used. This option can also be set on the deploy action level, in which case it\noverrides this  provider-level option. Set this option as per list of available self-managed state backends on\nhttps://www.pulumi.com/docs/intro/concepts/state/#using-a-self-managed-backend",
                                        "default": "https://api.pulumi.com",
                                        "format": "uri-reference"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "pluginTaskConcurrencyLimit": {
                                    "anyOf": [
                                      {
                                        "type": "number",
                                        "description": "Sets the maximum task concurrency for the tasks generated by the pulumi plugin commands (e.g. when running\n`garden plugins pulumi preview`).\n\nNote: This limit is not applied when running built-in commands (e.g. `garden deploy`).",
                                        "default": 5
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "useNewPulumiVarfileSchema": {
                                    "anyOf": [
                                      {
                                        "type": "boolean",
                                        "description": "If set to true, the deploy action will use the new Pulumi varfile schema, which does not nest all variables under\nthe 'config' key automatically like the old schema. This allow setting variables at the root level of the varfile\nthat don't belong to the 'config' key. Example:\n```\nconfig:\n  myVar: value\nsecretsprovider: gcpkms://projects/xyz/locations/global/keyRings/pulumi/cryptoKeys/pulumi-secrets\n```\nFor more information see [this guide on pulumi varfiles and variables](https://docs.garden.io/pulumi-plugin/about#pulumi-varfile-schema)",
                                        "default": false
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$merge": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Merge stuff"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$if": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "If statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$else": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Else statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$then": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Then statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$forEach": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "For each statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$return": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Return statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$filter": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Filter statements"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  },
                                  "$concat": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "description": "Concat lists"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\$\\{[^}]+\\}$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^\\$\\{[^}]+\\}$"
                    }
                  ]
                }
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "defaultEnvironment": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "dev"
                ],
                "description": "The default environment to use when calling commands without the `--env` parameter. May include a namespace name, in the format `<namespace>.<environment>`. Defaults to the first configured environment, with no namespace set.",
                "default": ""
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "dotIgnoreFiles": {
            "anyOf": [
              {
                "type": "array",
                "examples": [
                  [
                    ".gitignore"
                  ]
                ],
                "description": "Specify a filename that should be used as \".ignore\" file across the project, using the same syntax and semantics as `.gitignore` files. By default, patterns matched in `.gardenignore` files, found anywhere in the project, are ignored when scanning for actions and action sources.",
                "default": []
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "dotIgnoreFile": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  ".gitignore"
                ],
                "description": "Specify a filename that should be used as \".ignore\" file across the project, using the same syntax and semantics as `.gitignore` files. By default, patterns matched in `.gardenignore` files, found anywhere in the project, are ignored when scanning for actions and action sources.\nNote: prior to Garden 0.13.0, it was possible to specify _multiple_ \".ignore\" files using the `dotIgnoreFiles` field in the project configuration.\nNote that this take precedence over the project `scan.include` field, and action `include` fields, so any paths matched by the .ignore file will be ignored even if they are explicitly specified in those fields.\nSee the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.",
                "default": ".gardenignore"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "proxy": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "hostname": {
                    "anyOf": [
                      {
                        "type": "string",
                        "examples": [
                          [
                            "127.0.0.1"
                          ]
                        ],
                        "description": "The URL that Garden uses when creating port forwards. Defaults to \"localhost\".\n\nNote that the `GARDEN_PROXY_DEFAULT_ADDRESS` environment variable takes precedence over this value.",
                        "default": "localhost"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$merge": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Merge stuff"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$if": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "If statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$else": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Else statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$then": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Then statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$forEach": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "For each statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$return": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Return statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$filter": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Filter statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$concat": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Concat lists"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "scan": {
            "anyOf": [
              {
                "type": "object",
                "description": "Control where and how to scan for configuration files in the project.",
                "properties": {
                  "include": {
                    "anyOf": [
                      {
                        "type": "array",
                        "examples": [
                          [
                            "actions/**/*"
                          ]
                        ],
                        "description": "Specify a list of POSIX-style paths or globs that should be scanned for Garden configuration files.\n\nNote that you can also _exclude_ path using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `exclude` field, the paths/globs specified here have _no effect_ on which files and directories Garden watches for changes. Use the `exclude` field to affect those, if you have large directories that should not be watched for changes.\n\nAlso note that specifying an empty list here means _no paths_ should be included.",
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "exclude": {
                    "anyOf": [
                      {
                        "type": "array",
                        "examples": [
                          [
                            "public/**/*",
                            "tmp/**/*"
                          ]
                        ],
                        "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded when scanning for configuration files.\n\nThe filters here also affect which files and directories are watched for changes. So if you have a large number of directories in your project that should not be watched, you should specify them here.\n\nFor example, you might want to exclude large vendor directories in your project from being scanned and watched, by setting `exclude: [node_modules/**/*, vendor/**/*]`.\n\nNote that you can also explicitly _include_ files using the `include` field. If you also specify the `include` field, the paths/patterns specified here are filtered from the files matched by `include`.\n\nThe `include` field does _not_ affect which files are watched.\n\nSee the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.",
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "git": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "mode": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Choose how to perform scans of git repositories. Defaults to `repo`. The `subtree` runs individual git scans on each action/module path. The `repo` mode scans entire repositories and then filters down to files matching the paths, includes and excludes for each action/module. This can be considerably more efficient for large projects with many actions/modules.",
                                "default": "repo",
                                "enum": [
                                  "repo",
                                  "subtree"
                                ]
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$merge": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Merge stuff"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$if": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "If statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$else": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Else statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$then": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Then statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$forEach": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "For each statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$return": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Return statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$filter": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Filter statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$concat": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Concat lists"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$merge": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Merge stuff"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$if": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "If statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$else": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Else statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$then": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Then statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$forEach": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "For each statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$return": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Return statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$filter": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Filter statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$concat": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Concat lists"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "outputs": {
            "anyOf": [
              {
                "type": "array",
                "description": "A list of output values that the project should export. These are exported by the `garden get outputs` command, as well as when referencing a project as a sub-project within another project.\n\nYou may use any template strings to specify the values, including references to provider outputs, action\noutputs and runtime outputs. For a full reference, see the [Output configuration context](./template-strings/project-outputs.md) section in the Template String Reference.\n\nNote that if any runtime outputs are referenced, the referenced services and tasks will be deployed and run if necessary when resolving the outputs.",
                "default": []
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "sources": {
            "anyOf": [
              {
                "type": "array",
                "description": "A list of remote sources to import into project.",
                "default": []
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "varfile": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "custom.env"
                ],
                "description": "Specify a path (relative to the project root) to a file containing variables, that we apply on top of the\nproject-wide `variables` field.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nIf you don't set the field and the `garden.env` file does not exist, we simply ignore it.\nIf you do override the default value and the file doesn't exist, an error will be thrown.\n\n_Note that in many cases it is advisable to only use environment-specific var files, instead of combining\nmultiple ones. See the `environments[].varfile` field for this option._",
                "default": "garden.env"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "variables": {
            "anyOf": [
              {
                "type": "object",
                "description": "Key/value map of variables to configure for all environments. Keys may contain letters and numbers. Any values are permitted, including arrays and objects of any nesting.",
                "additionalProperties": true
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Workflow"
          }
        }
      },
      "then": {
        "type": "object",
        "description": "Configure a workflow for this project.",
        "properties": {
          "apiVersion": {
            "description": "The schema version of this config (currently unused).",
            "default": "garden.io/v0",
            "const": "garden.io/v0"
          },
          "kind": {
            "default": "Workflow",
            "const": "Workflow"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "my-workflow"
                ],
                "description": "The name of this workflow."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "description": "A description of the workflow."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "envVars": {
            "anyOf": [
              {
                "type": "object",
                "description": "A map of environment variables to use for the workflow. These will be available to all steps in the workflow.",
                "additionalProperties": true
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "files": {
            "anyOf": [
              {
                "type": "array",
                "description": "A list of files to write before starting the workflow.\n\nThis is useful to e.g. create files required for provider authentication, and can be created from data stored in secrets or templated strings.\n\nNote that you cannot reference provider configuration in template strings within this field, since they are resolved after these files are generated. This means you can reference the files specified here in your provider configurations.",
                "default": []
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "keepAliveHours": {
            "anyOf": [
              {
                "type": "number",
                "description": "The number of hours to keep the workflow pod running after completion.",
                "default": 48
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "resources": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "requests": {
                    "anyOf": [
                      {
                        "type": "object",
                        "default": {
                          "cpu": 50,
                          "memory": 64
                        },
                        "properties": {
                          "cpu": {
                            "anyOf": [
                              {
                                "type": "number",
                                "description": "The minimum amount of CPU the workflow needs in order to be scheduled, in millicpus (i.e. 1000 = 1 CPU).",
                                "minimum": 50
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "memory": {
                            "anyOf": [
                              {
                                "type": "number",
                                "description": "The minimum amount of RAM the workflow needs in order to be scheduled, in megabytes (i.e. 1024 = 1 GB).",
                                "minimum": 64
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$merge": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Merge stuff"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$if": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "If statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$else": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Else statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$then": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Then statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$forEach": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "For each statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$return": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Return statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$filter": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Filter statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$concat": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Concat lists"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "limits": {
                    "anyOf": [
                      {
                        "type": "object",
                        "default": {
                          "cpu": 1000,
                          "memory": 1024
                        },
                        "properties": {
                          "cpu": {
                            "anyOf": [
                              {
                                "type": "number",
                                "description": "The maximum amount of CPU the workflow pod can use, in millicpus (i.e. 1000 = 1 CPU).",
                                "minimum": 100
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "memory": {
                            "anyOf": [
                              {
                                "type": "number",
                                "description": "The maximum amount of RAM the workflow pod can use, in megabytes (i.e. 1024 = 1 GB).",
                                "minimum": 64
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$merge": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Merge stuff"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$if": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "If statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$else": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Else statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$then": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Then statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$forEach": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "For each statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$return": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Return statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$filter": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Filter statements"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          },
                          "$concat": {
                            "anyOf": [
                              {
                                "type": "string",
                                "description": "Concat lists"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\$\\{[^}]+\\}$"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$merge": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Merge stuff"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$if": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "If statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$else": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Else statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$then": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Then statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$forEach": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "For each statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$return": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Return statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$filter": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Filter statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$concat": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Concat lists"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "limits": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "cpu": {
                    "anyOf": [
                      {
                        "type": "number",
                        "description": "The maximum amount of CPU the workflow pod can use, in millicpus (i.e. 1000 = 1 CPU).",
                        "minimum": 100
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "memory": {
                    "anyOf": [
                      {
                        "type": "number",
                        "description": "The maximum amount of RAM the workflow pod can use, in megabytes (i.e. 1024 = 1 GB).",
                        "minimum": 64
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$merge": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Merge stuff"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$if": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "If statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$else": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Else statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$then": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Then statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$forEach": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "For each statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$return": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Return statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$filter": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Filter statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$concat": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Concat lists"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "steps": {
            "anyOf": [
              {
                "type": "array",
                "description": "The steps the workflow should run. At least one step is required. Steps are run sequentially. If a step fails, subsequent steps are skipped.",
                "default": []
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "triggers": {
            "anyOf": [
              {
                "type": "array",
                "description": "A list of triggers that determine when the workflow should be run, and which environment should be used (Garden Cloud only).",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "environment": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "The environment name (from your project configuration) to use for the workflow when matched by this trigger."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "namespace": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "The namespace to use for the workflow when matched by this trigger. Follows the namespacing setting used for this trigger's environment, as defined in your project's environment configs."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "events": {
                          "anyOf": [
                            {
                              "type": "array",
                              "description": "A list of [GitHub events](https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads) that should trigger this workflow.\n\nSee the Garden Cloud documentation on [configuring workflows](https://cloud.docs.garden.io/getting-started/workflows) for more details.\n\nSupported events:\n\n`pull-request`, `pull-request-closed`, `pull-request-merged`, `pull-request-opened`, `pull-request-reopened`, `pull-request-updated`, `push`\n\n",
                              "uniqueItems": true,
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "enum": [
                                      "pull-request",
                                      "pull-request-closed",
                                      "pull-request-merged",
                                      "pull-request-opened",
                                      "pull-request-reopened",
                                      "pull-request-updated",
                                      "push"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "branches": {
                          "anyOf": [
                            {
                              "type": "array",
                              "description": "If specified, only run the workflow for branches matching one of these filters. These filters refer to the pull/merge request's head branch (e.g. `my-feature-branch`), not the base branch that the pull/merge request would be merged into if approved (e.g. `main`)."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "baseBranches": {
                          "anyOf": [
                            {
                              "type": "array",
                              "description": "If specified, only run the workflow for pull/merge requests whose base branch matches one of these filters."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "ignoreBranches": {
                          "anyOf": [
                            {
                              "type": "array",
                              "description": "If specified, do not run the workflow for branches matching one of these filters. These filters refer to the pull/merge request's head branch (e.g. `my-feature-branch`), not the base branch that the pull/merge request would be merged into if approved (e.g. `main`)."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "ignoreBaseBranches": {
                          "anyOf": [
                            {
                              "type": "array",
                              "description": "If specified, do not run the workflow for pull/merge requests whose base branch matches one of these filters."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$merge": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Merge stuff"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$if": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "If statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$else": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Else statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$then": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Then statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$forEach": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "For each statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$return": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Return statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$filter": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Filter statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$concat": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Concat lists"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "type": "string",
                      "pattern": "^\\$\\{[^}]+\\}$"
                    }
                  ]
                }
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        },
        "additionalProperties": true
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "ConfigTemplate"
          }
        }
      },
      "then": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "description": "The schema version of this config (currently unused).",
            "default": "garden.io/v0",
            "const": "garden.io/v0"
          },
          "kind": {
            "anyOf": [
              {
                "type": "string",
                "default": "ConfigTemplate",
                "enum": [
                  "ConfigTemplate",
                  "ModuleTemplate"
                ]
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "description": "The name of the template."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "inputsSchemaPath": {
            "anyOf": [
              {
                "type": "string",
                "description": "Path to a JSON schema file describing the expected inputs for the template. Must be an object schema. If none is provided all inputs will be accepted."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "modules": {
            "anyOf": [
              {
                "type": "array",
                "description": "A list of modules this template will output. The schema for each is the same as when you create modules normally in configuration files, with the addition of a `path` field, which allows you to specify a sub-directory to set as the module root.\n\nIn addition to any template strings you can normally use for modules (see [the reference](./template-strings/modules.md)), you can reference the inputs described by the inputs schema for the template, using ${inputs.*} template strings, as well as ${parent.name} and ${template.name}, to reference the name of the module using the template, and the name of the template itself, respectively. This also applies to file contents specified under the `files` key.\n\n**Important: Make sure you use templates for any identifiers that must be unique, such as module names, service names and task names. Otherwise you'll inevitably run into configuration errors. The module names can reference the ${inputs.*}, ${parent.name} and ${template.name} keys. Other identifiers can also reference those, plus any other keys available for module templates (see [the module context reference](./template-strings/modules.md)).**",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "description": "Configure a module whose sources are located in this directory.",
                      "properties": {
                        "apiVersion": {
                          "description": "The schema version of this config (currently unused).",
                          "default": "garden.io/v0",
                          "const": "garden.io/v0"
                        },
                        "kind": {
                          "default": "Module",
                          "const": "Module"
                        },
                        "type": {
                          "anyOf": [
                            {
                              "type": "string",
                              "examples": [
                                "container"
                              ],
                              "description": "The type of this module."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "name": {
                          "anyOf": [
                            {
                              "type": "string",
                              "examples": [
                                "my-sweet-module"
                              ],
                              "description": "The name of this module."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "build": {
                          "anyOf": [
                            {
                              "type": "object",
                              "description": "Specify how to build the module. Note that plugins may define additional keys on this object.",
                              "properties": {
                                "dependencies": {
                                  "anyOf": [
                                    {
                                      "type": "array",
                                      "examples": [
                                        [
                                          {
                                            "name": "some-other-module-name"
                                          }
                                        ]
                                      ],
                                      "description": "A list of modules that must be built before this module is built.",
                                      "default": []
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "timeout": {
                                  "anyOf": [
                                    {
                                      "type": "integer",
                                      "description": "Maximum time in seconds to wait for build to finish.",
                                      "default": 600,
                                      "minimum": 1
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "$merge": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "description": "Merge stuff"
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "$if": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "description": "If statements"
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "$else": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "description": "Else statements"
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "$then": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "description": "Then statements"
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "$forEach": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "description": "For each statements"
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "$return": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "description": "Return statements"
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "$filter": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "description": "Filter statements"
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                },
                                "$concat": {
                                  "anyOf": [
                                    {
                                      "type": "string",
                                      "description": "Concat lists"
                                    },
                                    {
                                      "type": "string",
                                      "pattern": "^\\$\\{[^}]+\\}$"
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": true
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "local": {
                          "anyOf": [
                            {
                              "type": "boolean",
                              "description": "If set to true, Garden will run the build command, services, tests, and tasks in the module source directory,\ninstead of in the Garden build directory (under .garden/build/<module-name>).\n\nGarden will therefore not stage the build for local modules. This means that include/exclude filters\nand ignore files are not applied to local modules, except to calculate the module/action versions.\n\nIf you use use `build.dependencies[].copy` for one or more build dependencies of this module, the copied files\nwill be copied to the module source directory (instead of the build directory, as is the default case when\n`local = false`).\n\nNote: This maps to the `buildAtSource` option in this module's generated Build action (if any).",
                              "default": false
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "description": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "A description of the module."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "disabled": {
                          "anyOf": [
                            {
                              "type": "boolean",
                              "description": "Set this to `true` to disable the module. You can use this with conditional template strings to disable modules based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain modules for specific environments, e.g. only for development.\n\nDisabling a module means that any services, tasks and tests contained in it will not be build, deployed or run.\n\nIf you disable the module, and its services, tasks or tests are referenced as _runtime_ dependencies, Garden will automatically ignore those dependency declarations. Note however that template strings referencing the module's service or task outputs (i.e. runtime outputs) will fail to resolve when the module is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                              "default": false
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "include": {
                          "anyOf": [
                            {
                              "type": "array",
                              "examples": [
                                [
                                  "Dockerfile",
                                  "my-app.js"
                                ]
                              ],
                              "description": "Specify a list of POSIX-style paths or globs that should be regarded as the source files for this module. Files that do *not* match these paths or globs are excluded when computing the version of the module, when responding to filesystem watch events, and when staging builds.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nAlso note that specifying an empty list here means _no sources_ should be included.",
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "exclude": {
                          "anyOf": [
                            {
                              "type": "array",
                              "examples": [
                                [
                                  "tmp/**/*",
                                  "*.log"
                                ]
                              ],
                              "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the module. Files that match these paths or globs are excluded when computing the version of the module, when responding to filesystem watch events, and when staging builds.\n\nNote that you can also explicitly _include_ files using the `include` field. If you also specify the `include` field, the files/patterns specified here are filtered from the files matched by `include`. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes.",
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "repositoryUrl": {
                          "examples": [
                            "git+https://github.com/org/repo.git#v2.0"
                          ],
                          "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>\n\nGarden will import the repository source code into this module, but read the module's config from the local garden.yml file.",
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "string",
                              "format": "uri-reference"
                            }
                          ]
                        },
                        "allowPublish": {
                          "anyOf": [
                            {
                              "type": "boolean",
                              "description": "When false, disables pushing this module to remote registries via the publish command.",
                              "default": true
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "generateFiles": {
                          "anyOf": [
                            {
                              "type": "array",
                              "description": "A list of files to write to the module directory when resolving this module. This is useful to automatically generate (and template) any supporting files needed for the module.",
                              "default": []
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "variables": {
                          "anyOf": [
                            {
                              "type": "object",
                              "description": "A map of variables scoped to this particular module. These are resolved before any other parts of the module configuration and take precedence over project-scoped variables. They may reference project-scoped variables, and generally use any template strings normally allowed when resolving modules.",
                              "additionalProperties": true
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "varfile": {
                          "anyOf": [
                            {
                              "type": "string",
                              "examples": [
                                "my-module.env"
                              ],
                              "description": "Specify a path (relative to the module root) to a file containing variables, that we apply on top of the\nmodule-level `variables` field.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different module-level varfiles in different environments, you can template in the environment name\nto the varfile name, e.g. `varfile: \"my-module.${environment.name}.env` (this assumes that the corresponding\nvarfiles exist)."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "path": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "POSIX-style path of a sub-directory to set as the module root. If the directory does not exist, it is automatically created."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$merge": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Merge stuff"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$if": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "If statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$else": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Else statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$then": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Then statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$forEach": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "For each statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$return": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Return statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$filter": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Filter statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$concat": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Concat lists"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        }
                      },
                      "additionalProperties": true
                    },
                    {
                      "type": "string",
                      "pattern": "^\\$\\{[^}]+\\}$"
                    }
                  ]
                }
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "configs": {
            "anyOf": [
              {
                "type": "array",
                "description": "A list of Garden configs this template will output, e.g. a set of actions. The schema for each is the same as when you create resources normally in configuration files, with the addition of a `path` field, which allows you to specify a sub-directory to set as the root location of the resource.\n\nThe following resource kinds are allowed: `Build`, `Deploy`, `Run`, `Test` and `Workflow`\n\n__Note that you may _not_ specify Module resources here. Those need to be specified in the `modules` field.__\n\nIn addition to any template strings you can normally use for the given configurations (see [the reference](./template-strings/README.md)), you can reference the inputs described by the inputs schema for the template, using ${inputs.*} template strings, as well as ${parent.name} and ${template.name}, to reference the name of the `RenderTemplate` resource being rendered, and the name of the template itself, respectively.\n\n**Important: Make sure you use templates for any identifiers that must be unique, such as action names.**\nOtherwise you'll inevitably run into configuration errors when re-using the template. The names can reference the ${inputs.*}, ${parent.name} and ${template.name} keys, and must be resolvable when parsing the template (meaning no action or runtime references etc.). Other identifiers can also reference those, plus any other keys available for templates in the given configs (see [the reference](./template-strings/README.md)).\n\nAlso note that template strings are not allowed in the following fields: `apiVersion` and `kind`",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "description": "The schema version of this config (currently unused).",
                          "default": "garden.io/v0",
                          "const": "garden.io/v0"
                        },
                        "kind": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "The kind of resource to create.",
                              "enum": [
                                "Build",
                                "Deploy",
                                "Run",
                                "Test",
                                "Workflow"
                              ]
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "name": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "The name of the resource."
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$merge": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Merge stuff"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$if": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "If statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$else": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Else statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$then": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Then statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$forEach": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "For each statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$return": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Return statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$filter": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Filter statements"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        },
                        "$concat": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "Concat lists"
                            },
                            {
                              "type": "string",
                              "pattern": "^\\$\\{[^}]+\\}$"
                            }
                          ]
                        }
                      },
                      "additionalProperties": true
                    },
                    {
                      "type": "string",
                      "pattern": "^\\$\\{[^}]+\\}$"
                    }
                  ]
                }
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "RenderTemplate"
          }
        }
      },
      "then": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "description": "The schema version of this config (currently unused).",
            "default": "garden.io/v0",
            "const": "garden.io/v0"
          },
          "kind": {
            "default": "RenderTemplate",
            "const": "RenderTemplate"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "description": "A unique identifier for the Render config."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "disabled": {
            "anyOf": [
              {
                "type": "boolean",
                "description": "Set to true to skip rendering this template.",
                "default": false
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "template": {
            "anyOf": [
              {
                "type": "string",
                "description": "The ConfigTemplate to render."
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "inputs": {
            "anyOf": [
              {
                "type": "object",
                "description": "A map of inputs to pass to the ConfigTemplate. These must match the inputs schema of the ConfigTemplate.\n\nNote: You can use template strings for the inputs, but be aware that inputs that are used to generate the resulting config names and other top-level identifiers must be resolvable when scanning for configs, and thus cannot reference other actions, modules or runtime variables. See the [environment configuration context reference](./template-strings/environments.md) to see template strings that are safe to use for inputs used to generate config identifiers.",
                "properties": {
                  "$merge": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Merge stuff"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$if": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "If statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$else": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Else statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$then": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Then statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$forEach": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "For each statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$return": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Return statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$filter": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Filter statements"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  },
                  "$concat": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "Concat lists"
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[^}]+\\}$"
                      }
                    ]
                  }
                },
                "additionalProperties": true
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Module"
          }
        }
      },
      "then": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Build"
          },
          "type": {
            "const": "container"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "localId": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Specify an image ID to use when building locally, instead of the default of using the action name. Must be a valid Docker image identifier. **Note that the image _tag_ is always set to the action version.**"
                      },
                      "publishId": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Specify an image ID to use when publishing the image (via the `garden publish` command), instead of the default of using the action name. Must be a valid Docker image identifier."
                      },
                      "targetStage": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For multi-stage Dockerfiles, specify which image/stage to build (see https://docs.docker.com/engine/reference/commandline/build/#specifying-target-build-stage---target for details)."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "buildArgs": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify build arguments to use when building the container image.\n\nNote: Garden will always set a `GARDEN_ACTION_VERSION` (alias `GARDEN_MODULE_VERSION`) argument with the module/build version at build time.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "extraFlags": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify extra flags to use when building the container image. Note that arguments may not be portable across implementations."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "platforms": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify the platforms to build the image for. This is useful when building multi-platform images.\nThe format is `os/arch`, e.g. `linux/amd64`, `linux/arm64`, etc."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "secrets": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              {
                                "mytoken": "supersecret"
                              }
                            ],
                            "description": "Secret values that can be mounted in the Dockerfile, but do not become part of the image filesystem or image manifest. This is useful e.g. for private registry auth tokens.\n\nBuild arguments and environment variables are inappropriate for secrets, as they persist in the final image.\n\nThe secret can later be consumed in the Dockerfile like so:\n```\n  RUN --mount=type=secret,id=mytoken TOKEN=$(cat /run/secrets/mytoken) ...\n```\n\nSee also https://docs.docker.com/build/building/secrets/",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "dockerfile": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "POSIX-style name of a Dockerfile, relative to the action's source root.",
                            "default": "Dockerfile"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "hotReload": {
                        "type": [
                          "array",
                          "boolean",
                          "number",
                          "object",
                          "string",
                          "null"
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Build"
              },
              "allowPublish": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "When false, disables publishing this build to remote registries via the publish command.",
                    "default": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "buildAtSource": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "By default, builds are _staged_ in `.garden/build/<build name>` and that directory is used as the build context. This is done to avoid builds contaminating the source tree, which can end up confusing version computation, or a build including files that are not intended to be part of it. In most scenarios, the default behavior is desired and leads to the most predictable and verifiable builds, as well as avoiding potential confusion around file watching.\n\nYou _can_ override this by setting `buildAtSource: true`, which basically sets the build root for this action at the location of the Build action config in the source tree. This means e.g. that the build command in `exec` Builds runs at the source, and for Docker image builds the build is initiated from the source directory.\n\nAn important implication is that `include` and `exclude` directives for the action, as well as `.gardenignore` files, only affect version hash computation but are otherwise not effective in controlling the build context. This may lead to unexpected variation in builds with the same version hash. **This may also slow down code synchronization to remote destinations, e.g. when performing remote Docker image builds.**\n\nAdditionally, any `exec` runtime actions (and potentially others) that reference this Build with the `build` field, will run from the source directory of this action.\n\nWhile there may be good reasons to do this in some situations, please be aware that this increases the potential for side-effects and variability in builds. **You must take extra care**, including making sure that files generated during builds are excluded with e.g. `.gardenignore` files or `exclude` fields on potentially affected actions. Another potential issue is causing infinite loops when running with file-watching enabled, basically triggering a new build during the build.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "copyFrom": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "Copy files from other builds, ahead of running this build.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be included as the build context for the Build, and will affect the computed _version_ of the action.\n\nIf nothing is specified here, the whole directory may be assumed to be included in the build. Providers are sometimes able to infer the list of paths, e.g. from a Dockerfile, but often this is inaccurate (say, if a Dockerfile has an `ADD .` statement) so it may be important to set `include` and/or `exclude` to define the build context. Otherwise you may find unrelated files being included in the build context and the build version, which may result in unnecessarily repeated builds.\n\nYou can _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the build context and the Build version.\n\nProviders are sometimes able to infer the `include` field, e.g. from a Dockerfile, but often this is inaccurate (say, if a Dockerfile has an `ADD .` statement) so it may be important to set `include` and/or `exclude` to define the build context. Otherwise you may find unrelated files being included in the build context and the build version, which may result in unnecessarily repeated builds.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the build to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Build"
          },
          "type": {
            "const": "jib-container"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "localId": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Specify an image ID to use when building locally, instead of the default of using the action name. Must be a valid Docker image identifier. **Note that the image _tag_ is always set to the action version.**"
                      },
                      "publishId": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Specify an image ID to use when publishing the image (via the `garden publish` command), instead of the default of using the action name. Must be a valid Docker image identifier."
                      },
                      "targetStage": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For multi-stage Dockerfiles, specify which image/stage to build (see https://docs.docker.com/engine/reference/commandline/build/#specifying-target-build-stage---target for details)."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "buildArgs": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify build arguments to use when building the container image.\n\nNote: Garden will always set a `GARDEN_ACTION_VERSION` (alias `GARDEN_MODULE_VERSION`) argument with the module/build version at build time.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "platforms": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify the platforms to build the image for. This is useful when building multi-platform images.\nThe format is `os/arch`, e.g. `linux/amd64`, `linux/arm64`, etc."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "secrets": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              {
                                "mytoken": "supersecret"
                              }
                            ],
                            "description": "Secret values that can be mounted in the Dockerfile, but do not become part of the image filesystem or image manifest. This is useful e.g. for private registry auth tokens.\n\nBuild arguments and environment variables are inappropriate for secrets, as they persist in the final image.\n\nThe secret can later be consumed in the Dockerfile like so:\n```\n  RUN --mount=type=secret,id=mytoken TOKEN=$(cat /run/secrets/mytoken) ...\n```\n\nSee also https://docs.docker.com/build/building/secrets/",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "dockerfile": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "POSIX-style name of a Dockerfile, relative to the action's source root.",
                            "default": "Dockerfile"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "hotReload": {
                        "type": [
                          "array",
                          "boolean",
                          "number",
                          "object",
                          "string",
                          "null"
                        ]
                      },
                      "projectType": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The type of project to build. Defaults to auto-detecting between gradle and maven (based on which files/directories are found in the action root), but in some cases you may need to specify it.",
                            "default": "auto",
                            "enum": [
                              "gradle",
                              "maven",
                              "jib",
                              "auto",
                              "mavend"
                            ]
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "jdkVersion": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "description": "The JDK version to use.\n\nThe chosen version will be downloaded by Garden and used to define `JAVA_HOME` environment variable for Gradle and Maven.\n\nTo use an arbitrary JDK distribution, please use the `jdkPath` configuration option.",
                            "default": 11,
                            "enum": [
                              8,
                              11,
                              13,
                              17,
                              21
                            ]
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "jdkPath": {
                        "anyOf": [
                          {
                            "type": "string",
                            "examples": [
                              "${local.env.JAVA_HOME}"
                            ],
                            "description": "The JDK home path. This **always overrides** the JDK defined in `jdkVersion`.\n\nThe value will be used as `JAVA_HOME` environment variable for Gradle and Maven."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "dockerBuild": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Build the image and push to a local Docker daemon (i.e. use the `jib:dockerBuild` / `jibDockerBuild` target).",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "tarOnly": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Don't load or push the resulting image to a Docker daemon or registry, only build it as a tar file.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "tarFormat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Specify the image format in the resulting tar file. Only used if `tarOnly: true`.",
                            "default": "docker",
                            "enum": [
                              "docker",
                              "oci"
                            ]
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "gradlePath": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Defines the location of the custom executable Gradle binary.\n\nIf not provided, then the Gradle binary available in the working directory will be used.\nIf no Gradle binary found in the working dir, then Gradle 7.5.1 will be downloaded and used.\n\n**Note!** Either `jdkVersion` or `jdkPath` will be used to define `JAVA_HOME` environment variable for the custom Gradle.\nTo ensure a system JDK usage, please set `jdkPath` to `${local.env.JAVA_HOME}`."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "mavenPath": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Defines the location of the custom executable Maven binary.\n\nIf not provided, then Maven 3.8.8 will be downloaded and used.\n\n**Note!** Either `jdkVersion` or `jdkPath` will be used to define `JAVA_HOME` environment variable for the custom Maven.\nTo ensure a system JDK usage, please set `jdkPath` to `${local.env.JAVA_HOME}`."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "mavenPhases": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Defines the Maven phases to be executed during the Garden build step.",
                            "default": [
                              "compile"
                            ],
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "mavendPath": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Defines the location of the custom executable Maven Daemon binary.\n\nIf not provided, then Maven Daemon 0.9.0 will be downloaded and used.\n\n**Note!** Either `jdkVersion` or `jdkPath` will be used to define `JAVA_HOME` environment variable for the custom Maven Daemon.\nTo ensure a system JDK usage, please set `jdkPath` to `${local.env.JAVA_HOME}`."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "concurrentMavenBuilds": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "[EXPERIMENTAL] Enable/disable concurrent Maven and Maven Daemon builds.\n\nNote! Concurrent builds can be unstable. This option is disabled by default.\nThis option must be configured for each Build action individually.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "extraFlags": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify extra flags to pass to maven/gradle when building the container image."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Build"
              },
              "allowPublish": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "When false, disables publishing this build to remote registries via the publish command.",
                    "default": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "buildAtSource": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "By default, builds are _staged_ in `.garden/build/<build name>` and that directory is used as the build context. This is done to avoid builds contaminating the source tree, which can end up confusing version computation, or a build including files that are not intended to be part of it. In most scenarios, the default behavior is desired and leads to the most predictable and verifiable builds, as well as avoiding potential confusion around file watching.\n\nYou _can_ override this by setting `buildAtSource: true`, which basically sets the build root for this action at the location of the Build action config in the source tree. This means e.g. that the build command in `exec` Builds runs at the source, and for Docker image builds the build is initiated from the source directory.\n\nAn important implication is that `include` and `exclude` directives for the action, as well as `.gardenignore` files, only affect version hash computation but are otherwise not effective in controlling the build context. This may lead to unexpected variation in builds with the same version hash. **This may also slow down code synchronization to remote destinations, e.g. when performing remote Docker image builds.**\n\nAdditionally, any `exec` runtime actions (and potentially others) that reference this Build with the `build` field, will run from the source directory of this action.\n\nWhile there may be good reasons to do this in some situations, please be aware that this increases the potential for side-effects and variability in builds. **You must take extra care**, including making sure that files generated during builds are excluded with e.g. `.gardenignore` files or `exclude` fields on potentially affected actions. Another potential issue is causing infinite loops when running with file-watching enabled, basically triggering a new build during the build.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "copyFrom": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "Copy files from other builds, ahead of running this build.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be included as the build context for the Build, and will affect the computed _version_ of the action.\n\nIf nothing is specified here, the whole directory may be assumed to be included in the build. Providers are sometimes able to infer the list of paths, e.g. from a Dockerfile, but often this is inaccurate (say, if a Dockerfile has an `ADD .` statement) so it may be important to set `include` and/or `exclude` to define the build context. Otherwise you may find unrelated files being included in the build context and the build version, which may result in unnecessarily repeated builds.\n\nYou can _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the build context and the Build version.\n\nProviders are sometimes able to infer the `include` field, e.g. from a Dockerfile, but often this is inaccurate (say, if a Dockerfile has an `ADD .` statement) so it may be important to set `include` and/or `exclude` to define the build context. Otherwise you may find unrelated files being included in the build context and the build version, which may result in unnecessarily repeated builds.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the build to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Build"
          },
          "type": {
            "const": "exec"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "shell": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If `true`, runs file inside of a shell. Uses `/bin/sh` on UNIX and `cmd.exe` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX or `/d /s /c` on Windows.\n\nNote that if this is not set, no shell interpreter (Bash, `cmd.exe`, etc.) is used, so shell features such as variables substitution (`echo $PATH`) are not allowed.\n\nWe recommend against using this option since it is:\n\n- not cross-platform, encouraging shell-specific syntax.\n- slower, because of the additional shell interpretation.\n- unsafe, potentially allowing command injection."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "default": [],
                            "description": "The command to run to perform the build.\n\n_Note: You may omit this if all you need is for other implicit actions to happen, like copying files from build dependencies etc._\n\nBy default, the command is run inside the Garden build directory (under .garden/build/<build-name>). If the top level `buildAtSource` directive is set to `true`, the command runs in the action source directory instead. Please see the docs for that field for more information and potential implications. Also note that other `exec` actions that reference this build via the `build` field will then also run from this action's source directory.\n\nExample: `[\"npm\",\"run\",\"build\"]`"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "propertyNames": {
                              "minLength": 1
                            },
                            "default": {},
                            "description": "Environment variables to set when running the command."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Build"
              },
              "allowPublish": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "When false, disables publishing this build to remote registries via the publish command.",
                    "default": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "buildAtSource": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "By default, builds are _staged_ in `.garden/build/<build name>` and that directory is used as the build context. This is done to avoid builds contaminating the source tree, which can end up confusing version computation, or a build including files that are not intended to be part of it. In most scenarios, the default behavior is desired and leads to the most predictable and verifiable builds, as well as avoiding potential confusion around file watching.\n\nYou _can_ override this by setting `buildAtSource: true`, which basically sets the build root for this action at the location of the Build action config in the source tree. This means e.g. that the build command in `exec` Builds runs at the source, and for Docker image builds the build is initiated from the source directory.\n\nAn important implication is that `include` and `exclude` directives for the action, as well as `.gardenignore` files, only affect version hash computation but are otherwise not effective in controlling the build context. This may lead to unexpected variation in builds with the same version hash. **This may also slow down code synchronization to remote destinations, e.g. when performing remote Docker image builds.**\n\nAdditionally, any `exec` runtime actions (and potentially others) that reference this Build with the `build` field, will run from the source directory of this action.\n\nWhile there may be good reasons to do this in some situations, please be aware that this increases the potential for side-effects and variability in builds. **You must take extra care**, including making sure that files generated during builds are excluded with e.g. `.gardenignore` files or `exclude` fields on potentially affected actions. Another potential issue is causing infinite loops when running with file-watching enabled, basically triggering a new build during the build.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "copyFrom": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "Copy files from other builds, ahead of running this build.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be included as the build context for the Build, and will affect the computed _version_ of the action.\n\nIf nothing is specified here, the whole directory may be assumed to be included in the build. Providers are sometimes able to infer the list of paths, e.g. from a Dockerfile, but often this is inaccurate (say, if a Dockerfile has an `ADD .` statement) so it may be important to set `include` and/or `exclude` to define the build context. Otherwise you may find unrelated files being included in the build context and the build version, which may result in unnecessarily repeated builds.\n\nYou can _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the build context and the Build version.\n\nProviders are sometimes able to infer the `include` field, e.g. from a Dockerfile, but often this is inaccurate (say, if a Dockerfile has an `ADD .` statement) so it may be important to set `include` and/or `exclude` to define the build context. Otherwise you may find unrelated files being included in the build context and the build version, which may result in unnecessarily repeated builds.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the build to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Deploy"
          },
          "type": {
            "const": "container"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "/bin/sh",
                                "-c"
                              ]
                            ],
                            "description": "The command/entrypoint to run the container with."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "args": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "npm",
                                "start"
                              ]
                            ],
                            "description": "The arguments (on top of the `command`, i.e. entrypoint) to run the container with."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              [
                                {
                                  "MY_VAR": "some-value",
                                  "MY_SECRET_VAR": {
                                    "secretRef": {
                                      "name": "my-secret",
                                      "key": "some-key"
                                    }
                                  }
                                },
                                {}
                              ]
                            ],
                            "description": "Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with `GARDEN`) and values must be primitives or references to secrets.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "cpu": {
                        "anyOf": [
                          {
                            "type": "object",
                            "default": {
                              "min": 10,
                              "max": 1000
                            },
                            "properties": {
                              "min": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The minimum amount of CPU the container needs to be available for it to be deployed, in millicpus (i.e. 1000 = 1 CPU)",
                                    "default": 10
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "max": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "The maximum amount of CPU the container can use, in millicpus (i.e. 1000 = 1 CPU). If set to null will result in no limit being set.",
                                "default": 1000,
                                "minimum": 10
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "memory": {
                        "anyOf": [
                          {
                            "type": "object",
                            "default": {
                              "min": 90,
                              "max": 1024
                            },
                            "properties": {
                              "min": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The minimum amount of RAM the container needs to be available for it to be deployed, in megabytes (i.e. 1024 = 1 GB)",
                                    "default": 90
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "max": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "The maximum amount of RAM the container can use, in megabytes (i.e. 1024 = 1 GB) If set to null will result in no limit being set.",
                                "default": 1024,
                                "minimum": 64
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "volumes": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "List of volumes that should be mounted when starting the container.\n\nNote: If neither `hostPath` nor `action` is specified,\nan empty ephemeral volume is created and mounted when deploying the container.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "privileged": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If true, run the main container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "addCapabilities": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX capabilities to add when running the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "dropCapabilities": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX capabilities to remove when running the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "tty": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Specify if containers in this action have TTY support enabled (which implies having stdin support enabled).",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "deploymentStrategy": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Specifies the container's deployment strategy.",
                            "default": "RollingUpdate",
                            "enum": [
                              "RollingUpdate",
                              "Recreate"
                            ]
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "annotations": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              {
                                "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                              }
                            ],
                            "description": "Annotations to attach to the service _(note: May not be applicable to all providers)_.\n\nWhen using the Kubernetes provider, these annotations are applied to both Service and Pod resources. You can generally specify the annotations intended for both Pods or Services here, and the ones that don't apply on either side will be ignored (i.e. if you put a Service annotation here, it'll also appear on Pod specs but will be safely ignored there, and vice versa).",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "daemon": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Whether to run the service as a daemon (to ensure exactly one instance runs per node). May not be supported by all providers.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "sync": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specifies which files or directories to sync to which paths inside the running containers of the service when it's in sync mode, and overrides for the container command and/or arguments.\n\nSync is enabled e.g. by setting the `--sync` flag on the `garden deploy` command.\n\nSee the [Code Synchronization guide](https://docs.garden.io/guides/code-synchronization) for more information.",
                            "properties": {
                              "args": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "Override the default container arguments when in sync mode."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "command": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "Override the default container command (i.e. entrypoint) when in sync mode."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "paths": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "Specify one or more source files or directories to automatically sync with the running container.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "source": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "examples": [
                                                    "src"
                                                  ],
                                                  "description": "Path to a local directory to be synchronized with the target.\nThis should generally be a templated path to another action's source path (e.g. `${actions.build.my-container-image.sourcePath}`), or a relative path.\nIf a path is hard-coded, we recommend sticking with relative paths here, and using forward slashes (`/`) as a delimiter, as Windows-style paths with back slashes (`\\`) and absolute paths will work on some platforms, but they are not portable and will not work for users on other platforms.\nDefaults to the Deploy action's config's directory if no value is provided.",
                                                  "default": "."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "target": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "examples": [
                                                    "/app/src"
                                                  ],
                                                  "description": "POSIX-style absolute path to sync to inside the container. The root path (i.e. \"/\") is not allowed."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "exclude": {
                                              "anyOf": [
                                                {
                                                  "type": "array",
                                                  "examples": [
                                                    [
                                                      "dist/**/*",
                                                      "*.log"
                                                    ]
                                                  ],
                                                  "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\n`.git` directories and `.garden` directories are always ignored.",
                                                  "items": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "mode": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "The sync mode to use for the given paths. See the [Code Synchronization guide](https://docs.garden.io/guides/code-synchronization) for details.",
                                                  "default": "one-way-safe",
                                                  "enum": [
                                                    "one-way",
                                                    "one-way-safe",
                                                    "one-way-replica",
                                                    "one-way-reverse",
                                                    "one-way-replica-reverse",
                                                    "two-way",
                                                    "two-way-safe",
                                                    "two-way-resolved"
                                                  ]
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultFileMode": {
                                              "anyOf": [
                                                {
                                                  "type": "number",
                                                  "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                  "default": 420,
                                                  "minimum": 0,
                                                  "maximum": 511
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultDirectoryMode": {
                                              "anyOf": [
                                                {
                                                  "type": "number",
                                                  "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                  "default": 493,
                                                  "minimum": 0,
                                                  "maximum": 511
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultOwner": {
                                              "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                              "anyOf": [
                                                {
                                                  "type": "integer"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            },
                                            "defaultGroup": {
                                              "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                              "anyOf": [
                                                {
                                                  "type": "integer"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            },
                                            "$merge": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Merge stuff"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$if": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "If statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$else": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Else statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$then": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Then statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$forEach": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "For each statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$return": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Return statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$filter": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Filter statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$concat": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Concat lists"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "localMode": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "[EXPERIMENTAL] Configures the local application which will send and receive network requests instead of the target resource.\n\nThe target service will be replaced by a proxy container which runs an SSH server to proxy requests.\nReverse port-forwarding will be automatically configured to route traffic to the local service and back.\n\nLocal mode is enabled by setting the `--local` option on the `garden deploy` command.\nLocal mode always takes the precedence over sync mode if there are any conflicting service names.\n\nHealth checks are disabled for services running in local mode.\n\nSee the [Local Mode guide](https://docs.garden.io/guides/running-service-in-local-mode) for more information.\n\nNote! This feature is still experimental. Some incompatible changes can be made until the first non-experimental release.",
                            "properties": {
                              "ports": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "The reverse port-forwards configuration for the local application.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "local": {
                                              "anyOf": [
                                                {
                                                  "type": "integer",
                                                  "description": "The local port to be used for reverse port-forward.",
                                                  "exclusiveMinimum": 0,
                                                  "minimum": 0
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "remote": {
                                              "anyOf": [
                                                {
                                                  "type": "integer",
                                                  "description": "The remote port to be used for reverse port-forward.",
                                                  "exclusiveMinimum": 0,
                                                  "minimum": 0
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$merge": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Merge stuff"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$if": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "If statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$else": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Else statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$then": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Then statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$forEach": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "For each statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$return": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Return statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$filter": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Filter statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$concat": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Concat lists"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "command": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "The command to run the local application. If not present, then the local application should be started manually."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "restart": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "Specifies restarting policy for the local application. By default, the local application will be restarting infinitely with 1000ms between attempts.",
                                    "default": {
                                      "delayMsec": 1000,
                                      "max": null
                                    },
                                    "properties": {
                                      "delayMsec": {
                                        "anyOf": [
                                          {
                                            "type": "integer",
                                            "description": "Delay in milliseconds between the local application restart attempts. The default value is 1000ms.",
                                            "default": 1000,
                                            "exclusiveMinimum": -1,
                                            "minimum": -1
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "max": {
                                        "anyOf": [
                                          {
                                            "type": "integer",
                                            "description": "Max number of the local application restarts. Unlimited by default.",
                                            "default": null,
                                            "exclusiveMinimum": -1,
                                            "minimum": -1
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$merge": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Merge stuff"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$if": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "If statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$else": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Else statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$then": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Then statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$forEach": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "For each statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$return": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Return statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$filter": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Filter statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$concat": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Concat lists"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "image": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Specify an image ID to deploy. Should be a valid Docker image identifier. Required if no `build` is specified."
                      },
                      "ingresses": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                {
                                  "path": "/api",
                                  "port": "http"
                                }
                              ]
                            ],
                            "description": "List of ingress endpoints that the service exposes.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "healthCheck": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify how the service's health should be checked after deploying.",
                            "properties": {
                              "httpGet": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "Set this to check the service's health by making an HTTP request.",
                                    "properties": {
                                      "path": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "The path of the service's health check endpoint.",
                                            "format": "uri-reference"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "port": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "The name of the port where the service's health check endpoint should be available."
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "scheme": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "default": "HTTP"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$merge": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Merge stuff"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$if": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "If statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$else": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Else statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$then": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Then statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$forEach": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "For each statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$return": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Return statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$filter": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Filter statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$concat": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Concat lists"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "command": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "Set this to check the service's health by running a command in its container."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "tcpPort": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Set this to check the service's health by checking if this TCP port is accepting connections."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "readinessTimeoutSeconds": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The maximum number of seconds to wait until the readiness check counts as failed.",
                                    "default": 3,
                                    "minimum": 1
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "livenessTimeoutSeconds": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The maximum number of seconds to wait until the liveness check counts as failed.",
                                    "default": 3,
                                    "minimum": 1
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "hotReload": {
                        "type": [
                          "array",
                          "boolean",
                          "number",
                          "object",
                          "string",
                          "null"
                        ]
                      },
                      "timeout": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "description": "The maximum duration (in seconds) to wait for resources to deploy and become healthy.",
                            "default": 300
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "limits": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify resource limits for the service.",
                            "properties": {
                              "cpu": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The maximum amount of CPU the service can use, in millicpus (i.e. 1000 = 1 CPU)",
                                    "minimum": 10
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "memory": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The maximum amount of RAM the service can use, in megabytes (i.e. 1024 = 1 GB)",
                                    "minimum": 64
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "ports": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "List of ports that the service container exposes.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "replicas": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "description": "The number of instances of the service to deploy. Defaults to 3 for environments configured with `production: true`, otherwise 1.\nNote: This setting may be overridden or ignored in some cases. For example, when running with `daemon: true` or if the provider doesn't support multiple replicas."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Deploy"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Timeout for the deploy to complete, in seconds.",
                    "default": 300,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Deploy"
          },
          "type": {
            "const": "kubernetes"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "files": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX-style paths to YAML files to load manifests from. Each can contain multiple manifests, and can include any Garden template strings, which will be resolved before applying the manifests.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "kustomize": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Resolve the specified kustomization and include the resulting resources. Note that if you specify `files` or `manifests` as well, these are also included.",
                            "properties": {
                              "path": {
                                "description": "The directory path where the desired kustomization.yaml is, or a git repository URL. This could be the path to an overlay directory, for example. If it's a path, must be a relative POSIX-style path and must be within the action root. Defaults to the action root. If you set this to null, kustomize will not be run.",
                                "default": ".",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  },
                                  {
                                    "const": null
                                  }
                                ]
                              },
                              "version": {
                                "anyOf": [
                                  {
                                    "type": "integer",
                                    "description": "The Kustomize version to use.",
                                    "default": 5,
                                    "enum": [
                                      4,
                                      5
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "extraArgs": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "A list of additional arguments to pass to the `kustomize build` command. Note that specifying '-o' or '--output' is not allowed.",
                                    "default": []
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "manifests": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "List of Kubernetes resource manifests to deploy. If `files` is also specified, this is combined with the manifests read from the files.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "patchResources": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "A list of resources to patch using Kubernetes' patch strategies. This is useful for e.g. overwriting a given container image name with an image built by Garden\nwithout having to actually modify the underlying Kubernetes manifest in your source code. Another common example is to use this to change the number of replicas for a given\nKubernetes Deployment.\n\nUnder the hood, Garden just applies the `kubectl patch` command to the resource that matches the specified `kind` and `name`.\n\nPatches are applied to file manifests, inline manifests, and kustomize files.\n\nYou can learn more about patching Kubernetes resources here: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                            "maxLength": 63
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "portForwards": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Manually specify port forwards that Garden should set up when deploying in dev or watch mode. If specified, these override the auto-detection of forwardable ports, so you'll need to specify the full list of port forwards to create.",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "An identifier to describe the port forward."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "resource": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "The full resource kind and name to forward to, e.g. Service/my-service or Deployment/my-deployment. Note that Garden will not validate this ahead of attempting to start the port forward, so you need to make sure this is correctly set. The types of resources supported will match that of the `kubectl port-forward` CLI command."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "targetPort": {
                                      "anyOf": [
                                        {
                                          "type": "integer",
                                          "description": "The port number on the remote resource to forward to."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "localPort": {
                                      "anyOf": [
                                        {
                                          "type": "integer",
                                          "description": "The _preferred_ local port to forward from. If none is set, a random port is chosen. If the specified port is not available, a warning is shown and a random port chosen instead."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$merge": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Merge stuff"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$if": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "If statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$else": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Else statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$then": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Then statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$forEach": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "For each statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$return": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Return statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$filter": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Filter statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$concat": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Concat lists"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "timeout": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "description": "The maximum duration (in seconds) to wait for resources to deploy and become healthy.",
                            "default": 300
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "applyArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Additional arguments to pass to `kubectl apply`."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "waitForJobs": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Wait until the jobs have been completed. Garden will wait for as long as `timeout`."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "defaultTarget": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify a default resource in the deployment to use for syncs, local mode, and for the `garden exec` command.\n\nSpecify either `kind` and `name`, or a `podSelector`. The resource should be one of the resources deployed by this action (otherwise the target is not guaranteed to be deployed with adjustments required for syncing or local mode).\n\nSet `containerName` to specify a container to connect to in the remote Pod. By default the first container in the Pod is used.\n\nNote that if you specify `podSelector` here, it is not validated to be a selector matching one of the resources deployed by the action.",
                            "properties": {
                              "kind": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The kind of Kubernetes resource to find.",
                                    "enum": [
                                      "Deployment",
                                      "DaemonSet",
                                      "StatefulSet"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "podSelector": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                    "additionalProperties": true
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "containerName": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "sync": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Configure path syncs for the resources in this Deploy.\n\nIf you have multiple syncs for the Deploy, you can use the `defaults` field to set common configuration for every individual sync.",
                            "properties": {
                              "defaults": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "Defaults to set across every sync for this Deploy. If you use the `exclude` field here, it will be merged with any excludes set in individual syncs. These are applied on top of any defaults set in the provider configuration.",
                                    "properties": {
                                      "exclude": {
                                        "anyOf": [
                                          {
                                            "type": "array",
                                            "examples": [
                                              [
                                                "dist/**/*",
                                                "*.log"
                                              ]
                                            ],
                                            "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\nAny exclusion patterns defined in individual sync specs will be applied in addition to these patterns.\n\n`.git` directories and `.garden` directories are always ignored.",
                                            "items": {
                                              "anyOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "fileMode": {
                                        "anyOf": [
                                          {
                                            "type": "number",
                                            "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                            "default": 420,
                                            "minimum": 0,
                                            "maximum": 511
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "directoryMode": {
                                        "anyOf": [
                                          {
                                            "type": "number",
                                            "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                            "default": 493,
                                            "minimum": 0,
                                            "maximum": 511
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "owner": {
                                        "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ]
                                      },
                                      "group": {
                                        "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ]
                                      },
                                      "$merge": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Merge stuff"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$if": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "If statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$else": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Else statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$then": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Then statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$forEach": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "For each statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$return": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Return statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$filter": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Filter statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$concat": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Concat lists"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "paths": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "A list of syncs to start once the Deploy is successfully started.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "description": "Define a sync to start after the initial Deploy is complete.",
                                          "properties": {
                                            "target": {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "description": "The Kubernetes resource to sync to. If specified, this is used instead of `spec.defaultTarget`.",
                                                  "properties": {
                                                    "kind": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The kind of Kubernetes resource to find.",
                                                          "enum": [
                                                            "Deployment",
                                                            "DaemonSet",
                                                            "StatefulSet"
                                                          ]
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "name": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "podSelector": {
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                                          "additionalProperties": true
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "containerName": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$merge": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Merge stuff"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$if": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "If statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$else": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Else statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$then": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Then statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$forEach": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "For each statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$return": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Return statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$filter": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Filter statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$concat": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Concat lists"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "sourcePath": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "examples": [
                                                    "src"
                                                  ],
                                                  "description": "Path to a local directory to be synchronized with the target.\nThis should generally be a templated path to another action's source path (e.g. `${actions.build.my-container-image.sourcePath}`), or a relative path.\nIf a path is hard-coded, we recommend sticking with relative paths here, and using forward slashes (`/`) as a delimiter, as Windows-style paths with back slashes (`\\`) and absolute paths will work on some platforms, but they are not portable and will not work for users on other platforms.\nDefaults to the Deploy action's config's directory if no value is provided.",
                                                  "default": "."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "containerPath": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "examples": [
                                                    "/app/src"
                                                  ],
                                                  "description": "POSIX-style absolute path to sync to inside the container. The root path (i.e. \"/\") is not allowed."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "exclude": {
                                              "anyOf": [
                                                {
                                                  "type": "array",
                                                  "examples": [
                                                    [
                                                      "dist/**/*",
                                                      "*.log"
                                                    ]
                                                  ],
                                                  "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\n`.git` directories and `.garden` directories are always ignored.",
                                                  "items": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "mode": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "The sync mode to use for the given paths. See the [Code Synchronization guide](https://docs.garden.io/guides/code-synchronization) for details.",
                                                  "default": "one-way-safe",
                                                  "enum": [
                                                    "one-way",
                                                    "one-way-safe",
                                                    "one-way-replica",
                                                    "one-way-reverse",
                                                    "one-way-replica-reverse",
                                                    "two-way",
                                                    "two-way-safe",
                                                    "two-way-resolved"
                                                  ]
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultFileMode": {
                                              "anyOf": [
                                                {
                                                  "type": "number",
                                                  "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                  "default": 420,
                                                  "minimum": 0,
                                                  "maximum": 511
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultDirectoryMode": {
                                              "anyOf": [
                                                {
                                                  "type": "number",
                                                  "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                  "default": 493,
                                                  "minimum": 0,
                                                  "maximum": 511
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultOwner": {
                                              "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                              "anyOf": [
                                                {
                                                  "type": "integer"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            },
                                            "defaultGroup": {
                                              "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                              "anyOf": [
                                                {
                                                  "type": "integer"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            },
                                            "$merge": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Merge stuff"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$if": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "If statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$else": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Else statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$then": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Then statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$forEach": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "For each statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$return": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Return statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$filter": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Filter statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$concat": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Concat lists"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "overrides": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "Overrides for the container command and/or arguments for when in sync mode.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "target": {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "description": "The Kubernetes resources to override. If specified, this is used instead of `spec.defaultTarget`.",
                                                  "properties": {
                                                    "kind": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The kind of Kubernetes resource to find.",
                                                          "enum": [
                                                            "Deployment",
                                                            "DaemonSet",
                                                            "StatefulSet"
                                                          ]
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "name": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "podSelector": {
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                                          "additionalProperties": true
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "containerName": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$merge": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Merge stuff"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$if": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "If statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$else": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Else statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$then": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Then statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$forEach": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "For each statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$return": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Return statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$filter": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Filter statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$concat": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Concat lists"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "command": {
                                              "anyOf": [
                                                {
                                                  "type": "array",
                                                  "description": "Override the command/entrypoint in the matched container."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "args": {
                                              "anyOf": [
                                                {
                                                  "type": "array",
                                                  "description": "Override the args in the matched container."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "image": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Override the image of the matched container."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$merge": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Merge stuff"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$if": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "If statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$else": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Else statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$then": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Then statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$forEach": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "For each statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$return": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Return statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$filter": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Filter statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$concat": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Concat lists"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "localMode": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "[EXPERIMENTAL] Configures the local application which will send and receive network requests instead of the target resource specified by `localMode.target` or `defaultTarget`. One of those fields must be specified to enable local mode for the action.\n\nThe selected container of the target Kubernetes resource will be replaced by a proxy container which runs an SSH server to proxy requests.\nReverse port-forwarding will be automatically configured to route traffic to the locally run application and back.\n\nLocal mode is enabled by setting the `--local` option on the `garden deploy` command.\nLocal mode always takes the precedence over sync mode if there are any conflicting service names.\n\nHealth checks are disabled for services running in local mode.\n\nSee the [Local Mode guide](https://docs.garden.io/guides/running-service-in-local-mode) for more information.\n\nNote! This feature is still experimental. Some incompatible changes can be made until the first non-experimental release.",
                            "properties": {
                              "ports": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "The reverse port-forwards configuration for the local application.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "local": {
                                              "anyOf": [
                                                {
                                                  "type": "integer",
                                                  "description": "The local port to be used for reverse port-forward.",
                                                  "exclusiveMinimum": 0,
                                                  "minimum": 0
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "remote": {
                                              "anyOf": [
                                                {
                                                  "type": "integer",
                                                  "description": "The remote port to be used for reverse port-forward.",
                                                  "exclusiveMinimum": 0,
                                                  "minimum": 0
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$merge": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Merge stuff"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$if": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "If statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$else": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Else statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$then": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Then statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$forEach": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "For each statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$return": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Return statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$filter": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Filter statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$concat": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Concat lists"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "command": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "The command to run the local application. If not present, then the local application should be started manually."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "restart": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "Specifies restarting policy for the local application. By default, the local application will be restarting infinitely with 1000ms between attempts.",
                                    "default": {
                                      "delayMsec": 1000,
                                      "max": null
                                    },
                                    "properties": {
                                      "delayMsec": {
                                        "anyOf": [
                                          {
                                            "type": "integer",
                                            "description": "Delay in milliseconds between the local application restart attempts. The default value is 1000ms.",
                                            "default": 1000,
                                            "exclusiveMinimum": -1,
                                            "minimum": -1
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "max": {
                                        "anyOf": [
                                          {
                                            "type": "integer",
                                            "description": "Max number of the local application restarts. Unlimited by default.",
                                            "default": null,
                                            "exclusiveMinimum": -1,
                                            "minimum": -1
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$merge": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Merge stuff"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$if": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "If statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$else": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Else statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$then": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Then statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$forEach": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "For each statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$return": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Return statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$filter": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Filter statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$concat": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Concat lists"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "target": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "The remote Kubernetes resource to proxy traffic from. If specified, this is used instead of `defaultTarget`.",
                                    "properties": {
                                      "kind": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "The kind of Kubernetes resource to find.",
                                            "enum": [
                                              "Deployment",
                                              "DaemonSet",
                                              "StatefulSet"
                                            ]
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "name": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "podSelector": {
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                            "additionalProperties": true
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "containerName": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$merge": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Merge stuff"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$if": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "If statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$else": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Else statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$then": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Then statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$forEach": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "For each statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$return": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Return statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$filter": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Filter statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$concat": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Concat lists"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Deploy"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Timeout for the deploy to complete, in seconds.",
                    "default": 300,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Deploy"
          },
          "type": {
            "const": "helm"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                            "maxLength": 63
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "portForwards": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Manually specify port forwards that Garden should set up when deploying in dev or watch mode. If specified, these override the auto-detection of forwardable ports, so you'll need to specify the full list of port forwards to create.",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "An identifier to describe the port forward."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "resource": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "The full resource kind and name to forward to, e.g. Service/my-service or Deployment/my-deployment. Note that Garden will not validate this ahead of attempting to start the port forward, so you need to make sure this is correctly set. The types of resources supported will match that of the `kubectl port-forward` CLI command."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "targetPort": {
                                      "anyOf": [
                                        {
                                          "type": "integer",
                                          "description": "The port number on the remote resource to forward to."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "localPort": {
                                      "anyOf": [
                                        {
                                          "type": "integer",
                                          "description": "The _preferred_ local port to forward from. If none is set, a random port is chosen. If the specified port is not available, a warning is shown and a random port chosen instead."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$merge": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Merge stuff"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$if": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "If statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$else": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Else statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$then": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Then statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$forEach": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "For each statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$return": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Return statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$filter": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Filter statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$concat": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Concat lists"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "releaseName": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Optionally override the release name used when installing (defaults to the Deploy name)."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "timeout": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "description": "Time in seconds to wait for Helm to complete any individual Kubernetes operation (like Jobs for hooks).",
                            "default": 300
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "values": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Map of values to pass to Helm when rendering the templates. May include arrays and nested objects. When specified, these take precedence over the values in the `values.yaml` file (or the files specified in `valueFiles`).",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "valueFiles": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify value files to use when rendering the Helm chart. These will take precedence over the `values.yaml` file\nbundled in the Helm chart, and should be specified in ascending order of precedence. Meaning, the last file in\nthis list will have the highest precedence.\n\nIf you _also_ specify keys under the `values` field, those will effectively be added as another file at the end\nof this list, so they will take precedence over other files listed here.\n\nNote that the paths here should be relative to the _config_ root, and the files should be contained in\nthis action config's directory.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "atomic": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Whether to set the `--atomic` flag during installs and upgrades. Set to `true` if you'd like the changes applied\nto be reverted on failure. Set to false if e.g. you want to see more information about failures and then manually\nroll back, instead of having Helm do it automatically on failure.\n\nNote that setting `atomic` to `true` implies `wait`.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "waitForUnhealthyResources": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Whether to wait for the Helm command to complete before throwing an error if one of the resources being installed/upgraded is unhealthy.\n\nBy default, Garden will monitor the resources being created by Helm and throw an error as soon as one of them is unhealthy. This allows Garden to fail fast if there's an issue with one of the resources. If no issue is detected, Garden waits for the Helm command to complete.\n\nIf however `waitForUnhealthyResources` is set to `true` and some resources are unhealthy, then Garden will wait for Helm itself to throw an error which typically happens when it times out in the case of unhealthy resources (e.g. due to `ImagePullBackOff` or `CrashLoopBackOff` errors).\n\nWaiting for the timeout can take awhile so using the default value here is recommended unless you'd like to completely mimic Helm's behaviour and not rely on Garden's resource monitoring.\n\nNote that setting `atomic` to `true` implies `waitForUnhealthyResources`.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "chart": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify the Helm chart to use.\n\nIf the chart is defined in the same directory as the action, you can skip this, and the chart sources will be detected. If the chart is in the source tree but in a sub-directory, you should set `chart.path` to the directory path, relative to the action directory.\n\nFor remote charts, there are multiple options:\n- **[Helm Chart repository](https://helm.sh/docs/topics/chart_repository/)**: specify `chart.name` and `chart.version\\, and optionally `chart.repo` (if the chart is not in the default \"stable\" repo).\n- **[OCI-Based Registry](https://helm.sh/docs/topics/registries/)**: specify `chart.url` with the `oci://` URL and optionally `chart.version`.\n- **Absolute URL to a packaged chart**: specify `chart.url`.\n\nOne of `chart.name`, `chart.path` or `chart.url` must be specified.",
                            "properties": {
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "examples": [
                                      "ingress-nginx"
                                    ],
                                    "description": "A valid Helm chart name or URI (same as you'd input to `helm install`) Required if the action doesn't contain the Helm chart itself."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "path": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The path, relative to the action path, to the chart sources (i.e. where the Chart.yaml file is, if any)."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "repo": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The repository URL to fetch the chart from. Defaults to the \"stable\" helm repo (https://charts.helm.sh/stable)."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "url": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "URL to OCI repository, or a URL to a packaged Helm chart archive.",
                                    "format": "uri-reference"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "version": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The chart version to deploy."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "defaultTarget": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify a default resource in the deployment to use for syncs, local mode, and for the `garden exec` command.\n\nSpecify either `kind` and `name`, or a `podSelector`. The resource should be one of the resources deployed by this action (otherwise the target is not guaranteed to be deployed with adjustments required for syncing or local mode).\n\nSet `containerName` to specify a container to connect to in the remote Pod. By default the first container in the Pod is used.\n\nNote that if you specify `podSelector` here, it is not validated to be a selector matching one of the resources deployed by the action.",
                            "properties": {
                              "kind": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The kind of Kubernetes resource to find.",
                                    "enum": [
                                      "Deployment",
                                      "DaemonSet",
                                      "StatefulSet"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "podSelector": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                    "additionalProperties": true
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "containerName": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "sync": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Configure path syncs for the resources in this Deploy.\n\nIf you have multiple syncs for the Deploy, you can use the `defaults` field to set common configuration for every individual sync.",
                            "properties": {
                              "defaults": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "Defaults to set across every sync for this Deploy. If you use the `exclude` field here, it will be merged with any excludes set in individual syncs. These are applied on top of any defaults set in the provider configuration.",
                                    "properties": {
                                      "exclude": {
                                        "anyOf": [
                                          {
                                            "type": "array",
                                            "examples": [
                                              [
                                                "dist/**/*",
                                                "*.log"
                                              ]
                                            ],
                                            "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\nAny exclusion patterns defined in individual sync specs will be applied in addition to these patterns.\n\n`.git` directories and `.garden` directories are always ignored.",
                                            "items": {
                                              "anyOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "fileMode": {
                                        "anyOf": [
                                          {
                                            "type": "number",
                                            "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                            "default": 420,
                                            "minimum": 0,
                                            "maximum": 511
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "directoryMode": {
                                        "anyOf": [
                                          {
                                            "type": "number",
                                            "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                            "default": 493,
                                            "minimum": 0,
                                            "maximum": 511
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "owner": {
                                        "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ]
                                      },
                                      "group": {
                                        "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ]
                                      },
                                      "$merge": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Merge stuff"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$if": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "If statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$else": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Else statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$then": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Then statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$forEach": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "For each statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$return": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Return statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$filter": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Filter statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$concat": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Concat lists"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "paths": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "A list of syncs to start once the Deploy is successfully started.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "description": "Define a sync to start after the initial Deploy is complete.",
                                          "properties": {
                                            "target": {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "description": "The Kubernetes resource to sync to. If specified, this is used instead of `spec.defaultTarget`.",
                                                  "properties": {
                                                    "kind": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The kind of Kubernetes resource to find.",
                                                          "enum": [
                                                            "Deployment",
                                                            "DaemonSet",
                                                            "StatefulSet"
                                                          ]
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "name": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "podSelector": {
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                                          "additionalProperties": true
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "containerName": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$merge": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Merge stuff"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$if": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "If statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$else": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Else statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$then": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Then statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$forEach": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "For each statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$return": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Return statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$filter": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Filter statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$concat": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Concat lists"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "sourcePath": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "examples": [
                                                    "src"
                                                  ],
                                                  "description": "Path to a local directory to be synchronized with the target.\nThis should generally be a templated path to another action's source path (e.g. `${actions.build.my-container-image.sourcePath}`), or a relative path.\nIf a path is hard-coded, we recommend sticking with relative paths here, and using forward slashes (`/`) as a delimiter, as Windows-style paths with back slashes (`\\`) and absolute paths will work on some platforms, but they are not portable and will not work for users on other platforms.\nDefaults to the Deploy action's config's directory if no value is provided.",
                                                  "default": "."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "containerPath": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "examples": [
                                                    "/app/src"
                                                  ],
                                                  "description": "POSIX-style absolute path to sync to inside the container. The root path (i.e. \"/\") is not allowed."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "exclude": {
                                              "anyOf": [
                                                {
                                                  "type": "array",
                                                  "examples": [
                                                    [
                                                      "dist/**/*",
                                                      "*.log"
                                                    ]
                                                  ],
                                                  "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\n`.git` directories and `.garden` directories are always ignored.",
                                                  "items": {
                                                    "anyOf": [
                                                      {
                                                        "type": "string"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "pattern": "^\\$\\{[^}]+\\}$"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "mode": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "The sync mode to use for the given paths. See the [Code Synchronization guide](https://docs.garden.io/guides/code-synchronization) for details.",
                                                  "default": "one-way-safe",
                                                  "enum": [
                                                    "one-way",
                                                    "one-way-safe",
                                                    "one-way-replica",
                                                    "one-way-reverse",
                                                    "one-way-replica-reverse",
                                                    "two-way",
                                                    "two-way-safe",
                                                    "two-way-resolved"
                                                  ]
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultFileMode": {
                                              "anyOf": [
                                                {
                                                  "type": "number",
                                                  "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                  "default": 420,
                                                  "minimum": 0,
                                                  "maximum": 511
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultDirectoryMode": {
                                              "anyOf": [
                                                {
                                                  "type": "number",
                                                  "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                                                  "default": 493,
                                                  "minimum": 0,
                                                  "maximum": 511
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "defaultOwner": {
                                              "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                              "anyOf": [
                                                {
                                                  "type": "integer"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            },
                                            "defaultGroup": {
                                              "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                                              "anyOf": [
                                                {
                                                  "type": "integer"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ]
                                            },
                                            "$merge": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Merge stuff"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$if": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "If statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$else": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Else statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$then": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Then statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$forEach": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "For each statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$return": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Return statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$filter": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Filter statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$concat": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Concat lists"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "overrides": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "Overrides for the container command and/or arguments for when in sync mode.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "target": {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "description": "The Kubernetes resources to override. If specified, this is used instead of `spec.defaultTarget`.",
                                                  "properties": {
                                                    "kind": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The kind of Kubernetes resource to find.",
                                                          "enum": [
                                                            "Deployment",
                                                            "DaemonSet",
                                                            "StatefulSet"
                                                          ]
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "name": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "podSelector": {
                                                      "anyOf": [
                                                        {
                                                          "type": "object",
                                                          "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                                          "additionalProperties": true
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "containerName": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$merge": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Merge stuff"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$if": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "If statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$else": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Else statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$then": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Then statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$forEach": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "For each statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$return": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Return statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$filter": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Filter statements"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    },
                                                    "$concat": {
                                                      "anyOf": [
                                                        {
                                                          "type": "string",
                                                          "description": "Concat lists"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "pattern": "^\\$\\{[^}]+\\}$"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "command": {
                                              "anyOf": [
                                                {
                                                  "type": "array",
                                                  "description": "Override the command/entrypoint in the matched container."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "args": {
                                              "anyOf": [
                                                {
                                                  "type": "array",
                                                  "description": "Override the args in the matched container."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "image": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Override the image of the matched container."
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$merge": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Merge stuff"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$if": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "If statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$else": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Else statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$then": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Then statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$forEach": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "For each statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$return": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Return statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$filter": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Filter statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$concat": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Concat lists"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "localMode": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "[EXPERIMENTAL] Configures the local application which will send and receive network requests instead of the target resource specified by `localMode.target` or `defaultTarget`. One of those fields must be specified to enable local mode for the action.\n\nThe selected container of the target Kubernetes resource will be replaced by a proxy container which runs an SSH server to proxy requests.\nReverse port-forwarding will be automatically configured to route traffic to the locally run application and back.\n\nLocal mode is enabled by setting the `--local` option on the `garden deploy` command.\nLocal mode always takes the precedence over sync mode if there are any conflicting service names.\n\nHealth checks are disabled for services running in local mode.\n\nSee the [Local Mode guide](https://docs.garden.io/guides/running-service-in-local-mode) for more information.\n\nNote! This feature is still experimental. Some incompatible changes can be made until the first non-experimental release.",
                            "properties": {
                              "ports": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "The reverse port-forwards configuration for the local application.",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "local": {
                                              "anyOf": [
                                                {
                                                  "type": "integer",
                                                  "description": "The local port to be used for reverse port-forward.",
                                                  "exclusiveMinimum": 0,
                                                  "minimum": 0
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "remote": {
                                              "anyOf": [
                                                {
                                                  "type": "integer",
                                                  "description": "The remote port to be used for reverse port-forward.",
                                                  "exclusiveMinimum": 0,
                                                  "minimum": 0
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$merge": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Merge stuff"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$if": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "If statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$else": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Else statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$then": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Then statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$forEach": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "For each statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$return": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Return statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$filter": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Filter statements"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            },
                                            "$concat": {
                                              "anyOf": [
                                                {
                                                  "type": "string",
                                                  "description": "Concat lists"
                                                },
                                                {
                                                  "type": "string",
                                                  "pattern": "^\\$\\{[^}]+\\}$"
                                                }
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "command": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "The command to run the local application. If not present, then the local application should be started manually."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "restart": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "Specifies restarting policy for the local application. By default, the local application will be restarting infinitely with 1000ms between attempts.",
                                    "default": {
                                      "delayMsec": 1000,
                                      "max": null
                                    },
                                    "properties": {
                                      "delayMsec": {
                                        "anyOf": [
                                          {
                                            "type": "integer",
                                            "description": "Delay in milliseconds between the local application restart attempts. The default value is 1000ms.",
                                            "default": 1000,
                                            "exclusiveMinimum": -1,
                                            "minimum": -1
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "max": {
                                        "anyOf": [
                                          {
                                            "type": "integer",
                                            "description": "Max number of the local application restarts. Unlimited by default.",
                                            "default": null,
                                            "exclusiveMinimum": -1,
                                            "minimum": -1
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$merge": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Merge stuff"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$if": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "If statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$else": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Else statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$then": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Then statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$forEach": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "For each statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$return": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Return statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$filter": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Filter statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$concat": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Concat lists"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "target": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "The remote Kubernetes resource to proxy traffic from. If specified, this is used instead of `defaultTarget`.",
                                    "properties": {
                                      "kind": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "The kind of Kubernetes resource to find.",
                                            "enum": [
                                              "Deployment",
                                              "DaemonSet",
                                              "StatefulSet"
                                            ]
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "name": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "podSelector": {
                                        "anyOf": [
                                          {
                                            "type": "object",
                                            "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                            "additionalProperties": true
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "containerName": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$merge": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Merge stuff"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$if": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "If statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$else": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Else statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$then": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Then statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$forEach": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "For each statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$return": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Return statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$filter": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Filter statements"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      },
                                      "$concat": {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "description": "Concat lists"
                                          },
                                          {
                                            "type": "string",
                                            "pattern": "^\\$\\{[^}]+\\}$"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Deploy"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Timeout for the deploy to complete, in seconds.",
                    "default": 300,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Deploy"
          },
          "type": {
            "const": "configmap"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The namespace to deploy the ConfigMap in. Note that any resource referencing the ConfigMap must be in the same namespace, so in most cases you should leave this unset."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "data": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "The ConfigMap data, as a key/value map of string values.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Deploy"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Timeout for the deploy to complete, in seconds.",
                    "default": 300,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Deploy"
          },
          "type": {
            "const": "persistentvolumeclaim"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The namespace to deploy the PVC in. Note that any resources referencing the PVC must be in the same namespace, so in most cases you should leave this unset."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "spec": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "The spec for the PVC. This is passed directly to the created PersistentVolumeClaim resource. Note that the spec schema may include (or even require) additional fields, depending on the used `storageClass`. See the [PersistentVolumeClaim docs](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims) for details.",
                            "properties": {
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Deploy"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Timeout for the deploy to complete, in seconds.",
                    "default": 300,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Deploy"
          },
          "type": {
            "const": "exec"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "shell": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If `true`, runs file inside of a shell. Uses `/bin/sh` on UNIX and `cmd.exe` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX or `/d /s /c` on Windows.\n\nNote that if this is not set, no shell interpreter (Bash, `cmd.exe`, etc.) is used, so shell features such as variables substitution (`echo $PATH`) are not allowed.\n\nWe recommend against using this option since it is:\n\n- not cross-platform, encouraging shell-specific syntax.\n- slower, because of the additional shell interpretation.\n- unsafe, potentially allowing command injection."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "persistent": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "default": false,
                            "description": "Set this to true if the `deployCommand` is not expected to return, and should run until the Garden command is manually terminated.\n\nThis replaces the previously supported `devMode` from `exec` actions.\n\nIf this is set to true, it is highly recommended to also define `statusCommand` if possible. Otherwise the Deploy is considered to be immediately ready once the `deployCommand` is started."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "deployCommand": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "description": "The command to run to perform the deployment.\n\nNote that if a Build is referenced in the `build` field, the command will be run from the build directory for that Build action. If that Build has `buildAtSource: true` set, the command will be run from the source directory of the Build action. If no `build` reference is set, the command is run from the source directory of this action."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "statusCommand": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "description": "Optionally set a command to check the status of the deployment. If this is specified, it is run before the `deployCommand`. If the command runs successfully and returns exit code of 0, the deployment is considered already deployed and the `deployCommand` is not run.\n\nIf this is not specified, the deployment is always reported as \"unknown\", so it's highly recommended to specify this command if possible.\n\nIf `persistent: true`, Garden will run this command at an interval until it returns a zero exit code or times out.\n\nNote that if a Build is referenced in the `build` field, the command will be run from the build directory for that Build action. If that Build has `buildAtSource: true` set, the command will be run from the source directory of the Build action. If no `build` reference is set, the command is run from the source directory of this action."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "cleanupCommand": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "description": "Optionally set a command to clean the deployment up, e.g. when running `garden delete env`.\n\nNote that if a Build is referenced in the `build` field, the command will be run from the build directory for that Build action. If that Build has `buildAtSource: true` set, the command will be run from the source directory of the Build action. If no `build` reference is set, the command is run from the source directory of this action."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "statusTimeout": {
                        "anyOf": [
                          {
                            "type": "number",
                            "default": 10,
                            "description": "The maximum duration (in seconds) to wait for a for the `statusCommand` to return a zero exit code. Ignored if no `statusCommand` is set."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "propertyNames": {
                              "minLength": 1
                            },
                            "default": {},
                            "description": "Environment variables to set when running the deploy and status commands."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Deploy"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Timeout for the deploy to complete, in seconds.",
                    "default": 300,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Deploy"
          },
          "type": {
            "const": "terraform"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "allowDestroy": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If set to true, Garden will run `terraform destroy` on the stack when calling `garden delete namespace` or `garden delete deploy <deploy name>`.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "autoApply": {
                        "type": [
                          "boolean",
                          "null"
                        ],
                        "description": "If set to true, Garden will automatically run `terraform apply -auto-approve` when the stack is not\nup-to-date. Otherwise, a warning is logged if the stack is out-of-date, and an error thrown if it is missing\nentirely.\n\n**NOTE: This is not recommended for production, or shared environments in general!**\n\nDefaults to the value set in the provider config."
                      },
                      "root": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Specify the path to the working directory root—i.e. where your Terraform files are—relative to the config directory.",
                            "default": "."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "variables": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "A map of variables to use when applying the stack. You can define these here or you can place a\n`terraform.tfvars` file in the working directory root.\n\nIf you specified `variables` in the `terraform` provider config, those will be included but the variables\nspecified here take precedence.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "version": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The version of Terraform to use. Defaults to the version set in the provider config.\nSet to `null` to use whichever version of `terraform` that is on your PATH."
                      },
                      "workspace": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Use the specified Terraform workspace."
                      },
                      "backendConfig": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              "bucket: ${environment.name\\}-bucket\nkey: tf-state/${local.username\\}/terraform.tfstate"
                            ],
                            "description": "Configure the Terraform backend.\n\nThe key-value pairs defined here are set as the `-backend-config` options when Garden\nruns `terraform init`.\n\nThis can be used to dynamically set a Terraform backend depending on the environment.\n\nIf Garden sees that the backend has changes, it'll re-initialize Terraform and set the new values.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Deploy"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Timeout for the deploy to complete, in seconds.",
                    "default": 300,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Deploy"
          },
          "type": {
            "const": "pulumi"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "allowDestroy": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If set to true, Garden will destroy the stack when calling `garden cleanup namespace` or `garden cleanup deploy <deploy action name>`.\nThis is useful to prevent unintentional destroys in production or shared environments.",
                            "default": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "autoApply": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If set to false, deployments will fail unless a `planPath` is provided for this deploy action. This is useful when deploying to\nproduction or shared environments, or when the action deploys infrastructure that you don't want to unintentionally update/create.",
                            "default": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "createStack": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If set to true, Garden will automatically create the stack if it doesn't already exist.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "root": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Specify the path to the Pulumi project root, relative to the deploy action's root.",
                            "default": "."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "useNewPulumiVarfileSchema": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If set to true, the deploy action will use the new Pulumi varfile schema, which does not nest all variables under\nthe 'config' key automatically like the old schema. This allow setting variables at the root level of the varfile\nthat don't belong to the 'config' key. Example:\n```\nconfig:\n  myVar: value\nsecretsprovider: gcpkms://projects/xyz/locations/global/keyRings/pulumi/cryptoKeys/pulumi-secrets\n```\nFor more information see [this guide on pulumi varfiles and variables](https://docs.garden.io/pulumi-plugin/about#pulumi-varfile-schema)",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "pulumiVariables": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "A map of config variables to use when applying the stack. These are merged with the contents of any `pulumiVarfiles` provided\nfor this deploy action. The deploy action's stack config will be overwritten with the resulting merged config.\nVariables declared here override any conflicting config variables defined in this deploy action's `pulumiVarfiles`.\n\nNote: `pulumiVariables` should not include action outputs from other pulumi deploy actions when `cacheStatus` is set to true, since\nthe outputs may change from the time the stack status of the dependency action is initially queried to when it's been deployed.\n\nInstead, use pulumi stack references when using the `cacheStatus` config option.",
                            "default": {},
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "pulumiVarfiles": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify one or more paths (relative to the deploy action's root) to YAML files containing pulumi configuration.\n\nTemplated paths that resolve to `null`, `undefined` or an empty string are ignored.\n\nAny Garden template strings in these varfiles will be resolved when the files are loaded.\n\nEach file must consist of a single YAML document, which must be a map (dictionary). Keys may contain any\nvalue type.\n\nIf one or more varfiles is not found, no error is thrown (that varfile path is simply ignored).\n\nNote: The old varfile schema nests all variables under the 'config' key automatically. If you need to set variables\nat the root level of the varfile that don't belong to the 'config' key, set `useNewPulumiVarfileSchema` to true.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "orgName": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The name of the pulumi organization to use. Overrides the `orgName` set on the pulumi provider (if any).\nTo use the default org, set to null."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "cacheStatus": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "When set to true, the pulumi stack will be tagged with the Garden service version when deploying. The tag\nwill then be used for service status checks for this service. If the version doesn't change between deploys,\nthe subsequent deploy is skipped.\n\nNote that this will not pick up changes to stack outputs referenced via stack references in your pulumi stack,\nunless they're referenced via template strings in the deploy action configuration.\n\nWhen using stack references to other pulumi deploy actions in your project, we recommend including them in this\ndeploy action's `stackReferences` config field (see the documentation for that field on this page).\n\n`cacheStatus: true` is not supported for self-managed state backends.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "stackReferences": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "${actions.deploy.some-pulumi-deploy-action.outputs.ip-address}",
                                "${actions.deploy.some-other-pulumi-deploy-action.outputs.database-url}"
                              ]
                            ],
                            "description": "When setting `cacheStatus` to true for this deploy action, you should include all stack references used by this\ndeploy action's pulumi stack in this field.\n\nThis lets Garden know to redeploy the pulumi stack if the output values of one or more of these stack references\nhave changed since the last deployment.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "deployFromPreview": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "When set to true, will use pulumi plans generated by the `garden plugins pulumi preview` command when\ndeploying, and will fail if no plan exists locally for the deploy action.\n\nWhen this option is used, the pulumi plugin bypasses the status check altogether and passes the plan directly\nto `pulumi up` (via the `--plan` option, which is experimental as of March 2022). You should therefore\ntake care to only use this config option when you're sure you want to apply the changes in the plan.\n\nThis option is intended for two-phase pulumi deployments, where pulumi preview diffs are first reviewed (e.g.\nduring code review).",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "stack": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "The name of the pulumi stack to use. Defaults to the current environment name."
                      },
                      "showSecretsInOutput": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "When set to true, stack outputs which are marked as secrets will be shown in the output.\n\nBy default, Pulumi will print secret stack outputs as the string '[secret]' instead of\nthe true content of the output.",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Deploy"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Timeout for the deploy to complete, in seconds.",
                    "default": 300,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Run"
          },
          "type": {
            "const": "container"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "/bin/sh",
                                "-c"
                              ]
                            ],
                            "description": "The command/entrypoint to run the container with."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "args": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "npm",
                                "start"
                              ]
                            ],
                            "description": "The arguments (on top of the `command`, i.e. entrypoint) to run the container with."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              [
                                {
                                  "MY_VAR": "some-value",
                                  "MY_SECRET_VAR": {
                                    "secretRef": {
                                      "name": "my-secret",
                                      "key": "some-key"
                                    }
                                  }
                                },
                                {}
                              ]
                            ],
                            "description": "Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with `GARDEN`) and values must be primitives or references to secrets.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "cpu": {
                        "anyOf": [
                          {
                            "type": "object",
                            "default": {
                              "min": 10,
                              "max": 1000
                            },
                            "properties": {
                              "min": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The minimum amount of CPU the container needs to be available for it to be deployed, in millicpus (i.e. 1000 = 1 CPU)",
                                    "default": 10
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "max": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "The maximum amount of CPU the container can use, in millicpus (i.e. 1000 = 1 CPU). If set to null will result in no limit being set.",
                                "default": 1000,
                                "minimum": 10
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "memory": {
                        "anyOf": [
                          {
                            "type": "object",
                            "default": {
                              "min": 90,
                              "max": 1024
                            },
                            "properties": {
                              "min": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The minimum amount of RAM the container needs to be available for it to be deployed, in megabytes (i.e. 1024 = 1 GB)",
                                    "default": 90
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "max": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "The maximum amount of RAM the container can use, in megabytes (i.e. 1024 = 1 GB) If set to null will result in no limit being set.",
                                "default": 1024,
                                "minimum": 64
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "volumes": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "List of volumes that should be mounted when starting the container.\n\nNote: If neither `hostPath` nor `action` is specified,\nan empty ephemeral volume is created and mounted when deploying the container.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "privileged": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If true, run the main container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "addCapabilities": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX capabilities to add when running the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "dropCapabilities": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX capabilities to remove when running the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "tty": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Specify if containers in this action have TTY support enabled (which implies having stdin support enabled).",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "deploymentStrategy": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Specifies the container's deployment strategy.",
                            "default": "RollingUpdate",
                            "enum": [
                              "RollingUpdate",
                              "Recreate"
                            ]
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "artifacts": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                {
                                  "source": "/report/**/*"
                                }
                              ]
                            ],
                            "description": "Specify artifacts to copy out of the container after the run. The artifacts are stored locally under the `.garden/artifacts` directory.\n\nNote: Depending on the provider, this may require the container image to include `sh` `tar`, in order to enable the file transfer.",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "source": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "examples": [
                                            "/output/**/*"
                                          ],
                                          "description": "A POSIX-style path or glob to copy. Must be an absolute path. May contain wildcards."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "target": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "examples": [
                                            "outputs/foo/"
                                          ],
                                          "description": "A POSIX-style path to copy the artifacts to, relative to the project artifacts directory at `.garden/artifacts`.",
                                          "default": "."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$merge": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Merge stuff"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$if": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "If statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$else": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Else statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$then": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Then statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$forEach": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "For each statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$return": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Return statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$filter": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Filter statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$concat": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Concat lists"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "image": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Specify an image ID to deploy. Should be a valid Docker image identifier. Required if no `build` is specified."
                      },
                      "cacheResult": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Set to false if you don't want the Runs's result to be cached. Use this if the Run needs to be run any time your project (or one or more of the Run's dependants) is deployed. Otherwise the Run is only re-run when its version changes, or when you run `garden run`.",
                            "default": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Run"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the run to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Run"
          },
          "type": {
            "const": "kubernetes-exec"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "npm",
                                "run",
                                "test:integ"
                              ]
                            ],
                            "description": "The command to run inside the kubernetes workload."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "resource": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify a Kubernetes resource to derive the Pod spec from for the Run.\n\nThis resource will be selected from the manifests provided in this Run's `files` or `manifests` config field.\n\nThe following fields from the Pod will be used (if present) when executing the Run:\n\n**Warning**: Garden will retain `configMaps` and `secrets` as volumes, but remove `persistentVolumeClaim` volumes from the Pod spec, as they might already be mounted.\n* `affinity`\n* `automountServiceAccountToken`\n* `containers`\n* `dnsConfig`\n* `dnsPolicy`\n* `enableServiceLinks`\n* `hostAliases`\n* `hostIPC`\n* `hostNetwork`\n* `hostPID`\n* `hostname`\n* `imagePullSecrets`\n* `nodeName`\n* `nodeSelector`\n* `overhead`\n* `preemptionPolicy`\n* `priority`\n* `priorityClassName`\n* `runtimeClassName`\n* `schedulerName`\n* `securityContext`\n* `serviceAccount`\n* `serviceAccountName`\n* `shareProcessNamespace`\n* `subdomain`\n* `tolerations`\n* `topologySpreadConstraints`\n* `volumes`",
                            "properties": {
                              "kind": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The kind of Kubernetes resource to find.",
                                    "enum": [
                                      "Deployment",
                                      "DaemonSet",
                                      "StatefulSet"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "podSelector": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                    "additionalProperties": true
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "containerName": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                            "maxLength": 63
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Run"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the run to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Run"
          },
          "type": {
            "const": "kubernetes-pod"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "cacheResult": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Set to false if you don't want the Runs's result to be cached. Use this if the Run needs to be run any time your project (or one or more of the Run's dependants) is deployed. Otherwise the Run is only re-run when its version changes, or when you run `garden run`.",
                            "default": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "/bin/sh",
                                "-c"
                              ]
                            ],
                            "description": "The command/entrypoint used to run inside the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "args": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "rake",
                                "db:migrate"
                              ]
                            ],
                            "description": "The arguments to pass to the command/entrypoint used for execution."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              [
                                {
                                  "MY_VAR": "some-value",
                                  "MY_SECRET_VAR": {
                                    "secretRef": {
                                      "name": "my-secret",
                                      "key": "some-key"
                                    }
                                  }
                                },
                                {}
                              ]
                            ],
                            "description": "Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with `GARDEN`) and values must be primitives or references to secrets.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "artifacts": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify artifacts to copy out of the container after the run. The artifacts are stored locally under\nthe `.garden/artifacts` directory.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                            "maxLength": 63
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "kustomize": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Resolve the specified kustomization and include the resulting resources. Note that if you specify `files` or `manifests` as well, these are also included.",
                            "properties": {
                              "path": {
                                "description": "The directory path where the desired kustomization.yaml is, or a git repository URL. This could be the path to an overlay directory, for example. If it's a path, must be a relative POSIX-style path and must be within the action root. Defaults to the action root. If you set this to null, kustomize will not be run.",
                                "default": ".",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  },
                                  {
                                    "const": null
                                  }
                                ]
                              },
                              "version": {
                                "anyOf": [
                                  {
                                    "type": "integer",
                                    "description": "The Kustomize version to use.",
                                    "default": 5,
                                    "enum": [
                                      4,
                                      5
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "extraArgs": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "A list of additional arguments to pass to the `kustomize build` command. Note that specifying '-o' or '--output' is not allowed.",
                                    "default": []
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "patchResources": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "A list of resources to patch using Kubernetes' patch strategies. This is useful for e.g. overwriting a given container image name with an image built by Garden\nwithout having to actually modify the underlying Kubernetes manifest in your source code. Another common example is to use this to change the number of replicas for a given\nKubernetes Deployment.\n\nUnder the hood, Garden just applies the `kubectl patch` command to the resource that matches the specified `kind` and `name`.\n\nPatches are applied to file manifests, inline manifests, and kustomize files.\n\nYou can learn more about patching Kubernetes resources here: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "manifests": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "List of Kubernetes resource manifests to be searched (using `resource`e for the pod spec for the Run. If `files` is also specified, this is combined with the manifests read from the files.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "files": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX-style paths to YAML files to load manifests from. Each can contain multiple manifests, and can include any Garden template strings, which will be resolved before searching the manifests for the resource that contains the Pod spec for the Run.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "resource": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify a Kubernetes resource to derive the Pod spec from for the Run.\n\nThis resource will be selected from the manifests provided in this Run's `files` or `manifests` config field.\n\nThe following fields from the Pod will be used (if present) when executing the Run:\n\n**Warning**: Garden will retain `configMaps` and `secrets` as volumes, but remove `persistentVolumeClaim` volumes from the Pod spec, as they might already be mounted.\n* `affinity`\n* `automountServiceAccountToken`\n* `containers`\n* `dnsConfig`\n* `dnsPolicy`\n* `enableServiceLinks`\n* `hostAliases`\n* `hostIPC`\n* `hostNetwork`\n* `hostPID`\n* `hostname`\n* `imagePullSecrets`\n* `nodeName`\n* `nodeSelector`\n* `overhead`\n* `preemptionPolicy`\n* `priority`\n* `priorityClassName`\n* `runtimeClassName`\n* `schedulerName`\n* `securityContext`\n* `serviceAccount`\n* `serviceAccountName`\n* `shareProcessNamespace`\n* `subdomain`\n* `tolerations`\n* `topologySpreadConstraints`\n* `volumes`",
                            "properties": {
                              "kind": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The kind of Kubernetes resource to find.",
                                    "enum": [
                                      "Deployment",
                                      "DaemonSet",
                                      "StatefulSet"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "podSelector": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                    "additionalProperties": true
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "containerName": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "podSpec": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Supply a custom Pod specification. This should be a normal Kubernetes Pod manifest. Note that the spec will be modified for the Run, including overriding with other fields you may set here (such as `args` and `env`), and removing certain fields that are not supported.\n\nYou can find the full Pod spec in the [official Kubernetes documentation](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec)\n\nThe following Pod spec fields from the `podSpec` will be used (if present) when executing the Run:\n* `affinity`\n* `automountServiceAccountToken`\n* `containers`\n* `dnsConfig`\n* `dnsPolicy`\n* `enableServiceLinks`\n* `hostAliases`\n* `hostIPC`\n* `hostNetwork`\n* `hostPID`\n* `hostname`\n* `imagePullSecrets`\n* `nodeName`\n* `nodeSelector`\n* `overhead`\n* `preemptionPolicy`\n* `priority`\n* `priorityClassName`\n* `runtimeClassName`\n* `schedulerName`\n* `securityContext`\n* `serviceAccount`\n* `serviceAccountName`\n* `shareProcessNamespace`\n* `subdomain`\n* `tolerations`\n* `topologySpreadConstraints`\n* `volumes`",
                            "properties": {
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Run"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the run to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Run"
          },
          "type": {
            "const": "helm-pod"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "cacheResult": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Set to false if you don't want the Runs's result to be cached. Use this if the Run needs to be run any time your project (or one or more of the Run's dependants) is deployed. Otherwise the Run is only re-run when its version changes, or when you run `garden run`.",
                            "default": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "/bin/sh",
                                "-c"
                              ]
                            ],
                            "description": "The command/entrypoint used to run inside the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "args": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "rake",
                                "db:migrate"
                              ]
                            ],
                            "description": "The arguments to pass to the command/entrypoint used for execution."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              [
                                {
                                  "MY_VAR": "some-value",
                                  "MY_SECRET_VAR": {
                                    "secretRef": {
                                      "name": "my-secret",
                                      "key": "some-key"
                                    }
                                  }
                                },
                                {}
                              ]
                            ],
                            "description": "Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with `GARDEN`) and values must be primitives or references to secrets.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "artifacts": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify artifacts to copy out of the container after the run. The artifacts are stored locally under\nthe `.garden/artifacts` directory.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                            "maxLength": 63
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "releaseName": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Optionally override the release name used when rendering the templates (defaults to the Run name)."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "chart": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify the Helm chart to use.\n\nIf the chart is defined in the same directory as the action, you can skip this, and the chart sources will be detected. If the chart is in the source tree but in a sub-directory, you should set `chart.path` to the directory path, relative to the action directory.\n\nFor remote charts, there are multiple options:\n- **[Helm Chart repository](https://helm.sh/docs/topics/chart_repository/)**: specify `chart.name` and `chart.version\\, and optionally `chart.repo` (if the chart is not in the default \"stable\" repo).\n- **[OCI-Based Registry](https://helm.sh/docs/topics/registries/)**: specify `chart.url` with the `oci://` URL and optionally `chart.version`.\n- **Absolute URL to a packaged chart**: specify `chart.url`.\n\nOne of `chart.name`, `chart.path` or `chart.url` must be specified.",
                            "properties": {
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "examples": [
                                      "ingress-nginx"
                                    ],
                                    "description": "A valid Helm chart name or URI (same as you'd input to `helm install`) Required if the action doesn't contain the Helm chart itself."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "path": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The path, relative to the action path, to the chart sources (i.e. where the Chart.yaml file is, if any)."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "repo": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The repository URL to fetch the chart from. Defaults to the \"stable\" helm repo (https://charts.helm.sh/stable)."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "url": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "URL to OCI repository, or a URL to a packaged Helm chart archive.",
                                    "format": "uri-reference"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "version": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The chart version to deploy."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "values": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Map of values to pass to Helm when rendering the templates. May include arrays and nested objects. When specified, these take precedence over the values in the `values.yaml` file (or the files specified in `valueFiles`).",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "valueFiles": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify value files to use when rendering the Helm chart. These will take precedence over the `values.yaml` file\nbundled in the Helm chart, and should be specified in ascending order of precedence. Meaning, the last file in\nthis list will have the highest precedence.\n\nIf you _also_ specify keys under the `values` field, those will effectively be added as another file at the end\nof this list, so they will take precedence over other files listed here.\n\nNote that the paths here should be relative to the _config_ root, and the files should be contained in\nthis action config's directory.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "resource": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify a Kubernetes resource to derive the Pod spec from for the Run.\n\nThis resource will be selected from the manifests provided in this Run's `files` or `manifests` config field.\n\nThe following fields from the Pod will be used (if present) when executing the Run:\n\n**Warning**: Garden will retain `configMaps` and `secrets` as volumes, but remove `persistentVolumeClaim` volumes from the Pod spec, as they might already be mounted.\n* `affinity`\n* `automountServiceAccountToken`\n* `containers`\n* `dnsConfig`\n* `dnsPolicy`\n* `enableServiceLinks`\n* `hostAliases`\n* `hostIPC`\n* `hostNetwork`\n* `hostPID`\n* `hostname`\n* `imagePullSecrets`\n* `nodeName`\n* `nodeSelector`\n* `overhead`\n* `preemptionPolicy`\n* `priority`\n* `priorityClassName`\n* `runtimeClassName`\n* `schedulerName`\n* `securityContext`\n* `serviceAccount`\n* `serviceAccountName`\n* `shareProcessNamespace`\n* `subdomain`\n* `tolerations`\n* `topologySpreadConstraints`\n* `volumes`",
                            "properties": {
                              "kind": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The kind of Kubernetes resource to find.",
                                    "enum": [
                                      "Deployment",
                                      "DaemonSet",
                                      "StatefulSet"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "podSelector": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                    "additionalProperties": true
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "containerName": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "timeout": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "description": "Time in seconds to wait for Helm to render templates.",
                            "default": 300
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Run"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the run to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Run"
          },
          "type": {
            "const": "exec"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "shell": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If `true`, runs file inside of a shell. Uses `/bin/sh` on UNIX and `cmd.exe` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX or `/d /s /c` on Windows.\n\nNote that if this is not set, no shell interpreter (Bash, `cmd.exe`, etc.) is used, so shell features such as variables substitution (`echo $PATH`) are not allowed.\n\nWe recommend against using this option since it is:\n\n- not cross-platform, encouraging shell-specific syntax.\n- slower, because of the additional shell interpretation.\n- unsafe, potentially allowing command injection."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "artifacts": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "source": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "A POSIX-style path or glob to copy, relative to the build root."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "target": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "default": ".",
                                          "description": "A POSIX-style path to copy the artifacts to, relative to the project artifacts directory at `.garden/artifacts`."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$merge": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Merge stuff"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$if": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "If statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$else": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Else statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$then": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Then statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$forEach": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "For each statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$return": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Return statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$filter": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Filter statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$concat": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Concat lists"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "default": [],
                            "description": "A list of artifacts to copy after the run."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "description": "The command to run.\n\nNote that if a Build is referenced in the `build` field, the command will be run from the build directory for that Build action. If that Build has `buildAtSource: true` set, the command will be run from the source directory of the Build action. If no `build` reference is set, the command is run from the source directory of this action.\n\nExample: `[\"npm\",\"run\",\"build\"]`"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "propertyNames": {
                              "minLength": 1
                            },
                            "default": {},
                            "description": "Environment variables to set when running the command."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Run"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the run to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Test"
          },
          "type": {
            "const": "container"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "/bin/sh",
                                "-c"
                              ]
                            ],
                            "description": "The command/entrypoint to run the container with."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "args": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "npm",
                                "start"
                              ]
                            ],
                            "description": "The arguments (on top of the `command`, i.e. entrypoint) to run the container with."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              [
                                {
                                  "MY_VAR": "some-value",
                                  "MY_SECRET_VAR": {
                                    "secretRef": {
                                      "name": "my-secret",
                                      "key": "some-key"
                                    }
                                  }
                                },
                                {}
                              ]
                            ],
                            "description": "Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with `GARDEN`) and values must be primitives or references to secrets.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "cpu": {
                        "anyOf": [
                          {
                            "type": "object",
                            "default": {
                              "min": 10,
                              "max": 1000
                            },
                            "properties": {
                              "min": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The minimum amount of CPU the container needs to be available for it to be deployed, in millicpus (i.e. 1000 = 1 CPU)",
                                    "default": 10
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "max": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "The maximum amount of CPU the container can use, in millicpus (i.e. 1000 = 1 CPU). If set to null will result in no limit being set.",
                                "default": 1000,
                                "minimum": 10
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "memory": {
                        "anyOf": [
                          {
                            "type": "object",
                            "default": {
                              "min": 90,
                              "max": 1024
                            },
                            "properties": {
                              "min": {
                                "anyOf": [
                                  {
                                    "type": "number",
                                    "description": "The minimum amount of RAM the container needs to be available for it to be deployed, in megabytes (i.e. 1024 = 1 GB)",
                                    "default": 90
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "max": {
                                "type": [
                                  "number",
                                  "null"
                                ],
                                "description": "The maximum amount of RAM the container can use, in megabytes (i.e. 1024 = 1 GB) If set to null will result in no limit being set.",
                                "default": 1024,
                                "minimum": 64
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "volumes": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "List of volumes that should be mounted when starting the container.\n\nNote: If neither `hostPath` nor `action` is specified,\nan empty ephemeral volume is created and mounted when deploying the container.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "privileged": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If true, run the main container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "addCapabilities": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX capabilities to add when running the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "dropCapabilities": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX capabilities to remove when running the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "tty": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Specify if containers in this action have TTY support enabled (which implies having stdin support enabled).",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "deploymentStrategy": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Specifies the container's deployment strategy.",
                            "default": "RollingUpdate",
                            "enum": [
                              "RollingUpdate",
                              "Recreate"
                            ]
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "artifacts": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                {
                                  "source": "/report/**/*"
                                }
                              ]
                            ],
                            "description": "Specify artifacts to copy out of the container after the run. The artifacts are stored locally under the `.garden/artifacts` directory.\n\nNote: Depending on the provider, this may require the container image to include `sh` `tar`, in order to enable the file transfer.",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "source": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "examples": [
                                            "/output/**/*"
                                          ],
                                          "description": "A POSIX-style path or glob to copy. Must be an absolute path. May contain wildcards."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "target": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "examples": [
                                            "outputs/foo/"
                                          ],
                                          "description": "A POSIX-style path to copy the artifacts to, relative to the project artifacts directory at `.garden/artifacts`.",
                                          "default": "."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$merge": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Merge stuff"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$if": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "If statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$else": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Else statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$then": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Then statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$forEach": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "For each statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$return": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Return statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$filter": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Filter statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$concat": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Concat lists"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "image": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Specify an image ID to deploy. Should be a valid Docker image identifier. Required if no `build` is specified."
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Test"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the test to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Test"
          },
          "type": {
            "const": "hadolint"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "dockerfilePath": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "POSIX-style path to a Dockerfile that you want to lint with `hadolint`."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Test"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the test to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Test"
          },
          "type": {
            "const": "kubernetes-exec"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "npm",
                                "run",
                                "test:integ"
                              ]
                            ],
                            "description": "The command to run inside the kubernetes workload."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "resource": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify a Kubernetes resource to derive the Pod spec from for the Test.\n\nThis resource will be selected from the manifests provided in this Test's `files` or `manifests` config field.\n\nThe following fields from the Pod will be used (if present) when executing the Test:\n\n**Warning**: Garden will retain `configMaps` and `secrets` as volumes, but remove `persistentVolumeClaim` volumes from the Pod spec, as they might already be mounted.\n* `affinity`\n* `automountServiceAccountToken`\n* `containers`\n* `dnsConfig`\n* `dnsPolicy`\n* `enableServiceLinks`\n* `hostAliases`\n* `hostIPC`\n* `hostNetwork`\n* `hostPID`\n* `hostname`\n* `imagePullSecrets`\n* `nodeName`\n* `nodeSelector`\n* `overhead`\n* `preemptionPolicy`\n* `priority`\n* `priorityClassName`\n* `runtimeClassName`\n* `schedulerName`\n* `securityContext`\n* `serviceAccount`\n* `serviceAccountName`\n* `shareProcessNamespace`\n* `subdomain`\n* `tolerations`\n* `topologySpreadConstraints`\n* `volumes`",
                            "properties": {
                              "kind": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The kind of Kubernetes resource to find.",
                                    "enum": [
                                      "Deployment",
                                      "DaemonSet",
                                      "StatefulSet"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "podSelector": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                    "additionalProperties": true
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "containerName": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                            "maxLength": 63
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Test"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the test to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Test"
          },
          "type": {
            "const": "kubernetes-pod"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "cacheResult": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Set to false if you don't want the Runs's result to be cached. Use this if the Run needs to be run any time your project (or one or more of the Run's dependants) is deployed. Otherwise the Run is only re-run when its version changes, or when you run `garden run`.",
                            "default": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "/bin/sh",
                                "-c"
                              ]
                            ],
                            "description": "The command/entrypoint used to run inside the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "args": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "rake",
                                "db:migrate"
                              ]
                            ],
                            "description": "The arguments to pass to the command/entrypoint used for execution."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              [
                                {
                                  "MY_VAR": "some-value",
                                  "MY_SECRET_VAR": {
                                    "secretRef": {
                                      "name": "my-secret",
                                      "key": "some-key"
                                    }
                                  }
                                },
                                {}
                              ]
                            ],
                            "description": "Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with `GARDEN`) and values must be primitives or references to secrets.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "artifacts": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify artifacts to copy out of the container after the run. The artifacts are stored locally under\nthe `.garden/artifacts` directory.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                            "maxLength": 63
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "kustomize": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Resolve the specified kustomization and include the resulting resources. Note that if you specify `files` or `manifests` as well, these are also included.",
                            "properties": {
                              "path": {
                                "description": "The directory path where the desired kustomization.yaml is, or a git repository URL. This could be the path to an overlay directory, for example. If it's a path, must be a relative POSIX-style path and must be within the action root. Defaults to the action root. If you set this to null, kustomize will not be run.",
                                "default": ".",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  },
                                  {
                                    "const": null
                                  }
                                ]
                              },
                              "version": {
                                "anyOf": [
                                  {
                                    "type": "integer",
                                    "description": "The Kustomize version to use.",
                                    "default": 5,
                                    "enum": [
                                      4,
                                      5
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "extraArgs": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "description": "A list of additional arguments to pass to the `kustomize build` command. Note that specifying '-o' or '--output' is not allowed.",
                                    "default": []
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "patchResources": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "A list of resources to patch using Kubernetes' patch strategies. This is useful for e.g. overwriting a given container image name with an image built by Garden\nwithout having to actually modify the underlying Kubernetes manifest in your source code. Another common example is to use this to change the number of replicas for a given\nKubernetes Deployment.\n\nUnder the hood, Garden just applies the `kubectl patch` command to the resource that matches the specified `kind` and `name`.\n\nPatches are applied to file manifests, inline manifests, and kustomize files.\n\nYou can learn more about patching Kubernetes resources here: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "manifests": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "List of Kubernetes resource manifests to be searched (using `resource`e for the pod spec for the Test. If `files` is also specified, this is combined with the manifests read from the files.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "files": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "POSIX-style paths to YAML files to load manifests from. Each can contain multiple manifests, and can include any Garden template strings, which will be resolved before searching the manifests for the resource that contains the Pod spec for the Test.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "resource": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify a Kubernetes resource to derive the Pod spec from for the Test.\n\nThis resource will be selected from the manifests provided in this Test's `files` or `manifests` config field.\n\nThe following fields from the Pod will be used (if present) when executing the Test:\n\n**Warning**: Garden will retain `configMaps` and `secrets` as volumes, but remove `persistentVolumeClaim` volumes from the Pod spec, as they might already be mounted.\n* `affinity`\n* `automountServiceAccountToken`\n* `containers`\n* `dnsConfig`\n* `dnsPolicy`\n* `enableServiceLinks`\n* `hostAliases`\n* `hostIPC`\n* `hostNetwork`\n* `hostPID`\n* `hostname`\n* `imagePullSecrets`\n* `nodeName`\n* `nodeSelector`\n* `overhead`\n* `preemptionPolicy`\n* `priority`\n* `priorityClassName`\n* `runtimeClassName`\n* `schedulerName`\n* `securityContext`\n* `serviceAccount`\n* `serviceAccountName`\n* `shareProcessNamespace`\n* `subdomain`\n* `tolerations`\n* `topologySpreadConstraints`\n* `volumes`",
                            "properties": {
                              "kind": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The kind of Kubernetes resource to find.",
                                    "enum": [
                                      "Deployment",
                                      "DaemonSet",
                                      "StatefulSet"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "podSelector": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                    "additionalProperties": true
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "containerName": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "podSpec": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Supply a custom Pod specification. This should be a normal Kubernetes Pod manifest. Note that the spec will be modified for the Test, including overriding with other fields you may set here (such as `args` and `env`), and removing certain fields that are not supported.\n\nYou can find the full Pod spec in the [official Kubernetes documentation](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec)\n\nThe following Pod spec fields from the `podSpec` will be used (if present) when executing the Test:\n* `affinity`\n* `automountServiceAccountToken`\n* `containers`\n* `dnsConfig`\n* `dnsPolicy`\n* `enableServiceLinks`\n* `hostAliases`\n* `hostIPC`\n* `hostNetwork`\n* `hostPID`\n* `hostname`\n* `imagePullSecrets`\n* `nodeName`\n* `nodeSelector`\n* `overhead`\n* `preemptionPolicy`\n* `priority`\n* `priorityClassName`\n* `runtimeClassName`\n* `schedulerName`\n* `securityContext`\n* `serviceAccount`\n* `serviceAccountName`\n* `shareProcessNamespace`\n* `subdomain`\n* `tolerations`\n* `topologySpreadConstraints`\n* `volumes`",
                            "properties": {
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Test"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the test to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Test"
          },
          "type": {
            "const": "helm-pod"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "cacheResult": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Set to false if you don't want the Runs's result to be cached. Use this if the Run needs to be run any time your project (or one or more of the Run's dependants) is deployed. Otherwise the Run is only re-run when its version changes, or when you run `garden run`.",
                            "default": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "/bin/sh",
                                "-c"
                              ]
                            ],
                            "description": "The command/entrypoint used to run inside the container."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "args": {
                        "anyOf": [
                          {
                            "type": "array",
                            "examples": [
                              [
                                "rake",
                                "db:migrate"
                              ]
                            ],
                            "description": "The arguments to pass to the command/entrypoint used for execution."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "examples": [
                              [
                                {
                                  "MY_VAR": "some-value",
                                  "MY_SECRET_VAR": {
                                    "secretRef": {
                                      "name": "my-secret",
                                      "key": "some-key"
                                    }
                                  }
                                },
                                {}
                              ]
                            ],
                            "description": "Key/value map of environment variables. Keys must be valid POSIX environment variable names (must not start with `GARDEN`) and values must be primitives or references to secrets.",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "artifacts": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify artifacts to copy out of the container after the run. The artifacts are stored locally under\nthe `.garden/artifacts` directory.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
                            "maxLength": 63
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "releaseName": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Optionally override the release name used when rendering the templates (defaults to the Test name)."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "chart": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify the Helm chart to use.\n\nIf the chart is defined in the same directory as the action, you can skip this, and the chart sources will be detected. If the chart is in the source tree but in a sub-directory, you should set `chart.path` to the directory path, relative to the action directory.\n\nFor remote charts, there are multiple options:\n- **[Helm Chart repository](https://helm.sh/docs/topics/chart_repository/)**: specify `chart.name` and `chart.version\\, and optionally `chart.repo` (if the chart is not in the default \"stable\" repo).\n- **[OCI-Based Registry](https://helm.sh/docs/topics/registries/)**: specify `chart.url` with the `oci://` URL and optionally `chart.version`.\n- **Absolute URL to a packaged chart**: specify `chart.url`.\n\nOne of `chart.name`, `chart.path` or `chart.url` must be specified.",
                            "properties": {
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "examples": [
                                      "ingress-nginx"
                                    ],
                                    "description": "A valid Helm chart name or URI (same as you'd input to `helm install`) Required if the action doesn't contain the Helm chart itself."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "path": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The path, relative to the action path, to the chart sources (i.e. where the Chart.yaml file is, if any)."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "repo": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The repository URL to fetch the chart from. Defaults to the \"stable\" helm repo (https://charts.helm.sh/stable)."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "url": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "URL to OCI repository, or a URL to a packaged Helm chart archive.",
                                    "format": "uri-reference"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "version": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The chart version to deploy."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "values": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Map of values to pass to Helm when rendering the templates. May include arrays and nested objects. When specified, these take precedence over the values in the `values.yaml` file (or the files specified in `valueFiles`).",
                            "additionalProperties": true
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "valueFiles": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Specify value files to use when rendering the Helm chart. These will take precedence over the `values.yaml` file\nbundled in the Helm chart, and should be specified in ascending order of precedence. Meaning, the last file in\nthis list will have the highest precedence.\n\nIf you _also_ specify keys under the `values` field, those will effectively be added as another file at the end\nof this list, so they will take precedence over other files listed here.\n\nNote that the paths here should be relative to the _config_ root, and the files should be contained in\nthis action config's directory.",
                            "default": []
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "resource": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "Specify a Kubernetes resource to derive the Pod spec from for the Run.\n\nThis resource will be selected from the manifests provided in this Run's `files` or `manifests` config field.\n\nThe following fields from the Pod will be used (if present) when executing the Run:\n\n**Warning**: Garden will retain `configMaps` and `secrets` as volumes, but remove `persistentVolumeClaim` volumes from the Pod spec, as they might already be mounted.\n* `affinity`\n* `automountServiceAccountToken`\n* `containers`\n* `dnsConfig`\n* `dnsPolicy`\n* `enableServiceLinks`\n* `hostAliases`\n* `hostIPC`\n* `hostNetwork`\n* `hostPID`\n* `hostname`\n* `imagePullSecrets`\n* `nodeName`\n* `nodeSelector`\n* `overhead`\n* `preemptionPolicy`\n* `priority`\n* `priorityClassName`\n* `runtimeClassName`\n* `schedulerName`\n* `securityContext`\n* `serviceAccount`\n* `serviceAccountName`\n* `shareProcessNamespace`\n* `subdomain`\n* `tolerations`\n* `topologySpreadConstraints`\n* `volumes`",
                            "properties": {
                              "kind": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The kind of Kubernetes resource to find.",
                                    "enum": [
                                      "Deployment",
                                      "DaemonSet",
                                      "StatefulSet"
                                    ]
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "name": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "podSelector": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                                    "additionalProperties": true
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "containerName": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "timeout": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "description": "Time in seconds to wait for Helm to render templates.",
                            "default": 300
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Test"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the test to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Test"
          },
          "type": {
            "const": "exec"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "shell": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "If `true`, runs file inside of a shell. Uses `/bin/sh` on UNIX and `cmd.exe` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX or `/d /s /c` on Windows.\n\nNote that if this is not set, no shell interpreter (Bash, `cmd.exe`, etc.) is used, so shell features such as variables substitution (`echo $PATH`) are not allowed.\n\nWe recommend against using this option since it is:\n\n- not cross-platform, encouraging shell-specific syntax.\n- slower, because of the additional shell interpretation.\n- unsafe, potentially allowing command injection."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "artifacts": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "source": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "A POSIX-style path or glob to copy, relative to the build root."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "target": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "default": ".",
                                          "description": "A POSIX-style path to copy the artifacts to, relative to the project artifacts directory at `.garden/artifacts`."
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$merge": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Merge stuff"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$if": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "If statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$else": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Else statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$then": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Then statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$forEach": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "For each statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$return": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Return statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$filter": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Filter statements"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    },
                                    "$concat": {
                                      "anyOf": [
                                        {
                                          "type": "string",
                                          "description": "Concat lists"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$\\{[^}]+\\}$"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "default": [],
                            "description": "A list of artifacts to copy after the run."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "command": {
                        "anyOf": [
                          {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "description": "The command to run.\n\nNote that if a Build is referenced in the `build` field, the command will be run from the build directory for that Build action. If that Build has `buildAtSource: true` set, the command will be run from the source directory of the Build action. If no `build` reference is set, the command is run from the source directory of this action.\n\nExample: `[\"npm\",\"run\",\"build\"]`"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "env": {
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "propertyNames": {
                              "minLength": 1
                            },
                            "default": {},
                            "description": "Environment variables to set when running the command."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Test"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the test to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Test"
          },
          "type": {
            "const": "conftest"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "policyPath": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "POSIX-style path to a directory containing the policies to match the config against, or a\nspecific .rego file, relative to the action root.\nMust be a relative path, and should in most cases be within the project root.\nDefaults to the `policyPath` set in the provider config."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The policy namespace in which to find _deny_ and _warn_ rules.",
                            "default": "main"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "combine": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Set to true to use the conftest --combine flag",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "build": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Specify a build whose files we want to test."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "files": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "A list of files to test with the given policy. Must be POSIX-style paths, and may include wildcards.",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Test"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the test to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "Test"
          },
          "type": {
            "const": "conftest-helm"
          },
          "$merge": {
            "anyOf": [
              {
                "type": "string",
                "description": "Merge stuff"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$if": {
            "anyOf": [
              {
                "type": "string",
                "description": "If statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$else": {
            "anyOf": [
              {
                "type": "string",
                "description": "Else statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$then": {
            "anyOf": [
              {
                "type": "string",
                "description": "Then statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$forEach": {
            "anyOf": [
              {
                "type": "string",
                "description": "For each statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$return": {
            "anyOf": [
              {
                "type": "string",
                "description": "Return statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$filter": {
            "anyOf": [
              {
                "type": "string",
                "description": "Filter statements"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          },
          "$concat": {
            "anyOf": [
              {
                "type": "string",
                "description": "Concat lists"
              },
              {
                "type": "string",
                "pattern": "^\\$\\{[^}]+\\}$"
              }
            ]
          }
        }
      },
      "then": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "The schema version of this config (currently unused).",
                "default": "garden.io/v0",
                "const": "garden.io/v0"
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The type of action, e.g. `exec`, `container` or `kubernetes`. Some are built into Garden but mostly these will be defined by your configured providers."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A valid name for the action. Must be unique across all actions of the same _kind_ in your project."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "description": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "A description of the action."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "source": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "By default, the directory where the action is defined is used as the source for the build context.\n\nYou can override the directory that is used for the build context by setting `source.path`.\n\nYou can use `source.repository` to get the source from an external repository. For more information on remote actions, please refer to the [Remote Sources guide](https://docs.garden.io/advanced/using-remote-sources).",
                    "properties": {
                      "path": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "A relative POSIX-style path to the source directory for this action.\n\nIf specified together with `source.repository`, the path will be relative to the repository root.\n\nOtherwise, the path will be relative to the directory containing the Garden configuration file."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "repository": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "When set, Garden will import the action source from this repository, but use this action configuration (and not scan for configs in the separate repository).",
                            "properties": {
                              "url": {
                                "examples": [
                                  "git+https://github.com/org/repo.git#v2.0"
                                ],
                                "description": "A remote repository URL. Currently only supports git servers. Must contain a hash suffix pointing to a specific branch or tag, with the format: <git remote url>#<branch|tag>",
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string",
                                    "format": "uri-reference"
                                  }
                                ]
                              },
                              "$merge": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Merge stuff"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$if": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "If statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$else": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Else statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$then": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Then statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$forEach": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "For each statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$return": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Return statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$filter": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter statements"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              },
                              "$concat": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Concat lists"
                                  },
                                  {
                                    "type": "string",
                                    "pattern": "^\\$\\{[^}]+\\}$"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "dependencies": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "build.my-image",
                        "deploy.api"
                      ]
                    ],
                    "description": "A list of other actions that this action depends on, and should be built, deployed or run (depending on the action type) before processing this action.\n\nEach dependency should generally be expressed as a `\"<kind>.<name>\"` string, where _<kind>_ is one of `build`, `deploy`, `run` or `test`, and _<name>_ is the name of the action to depend on.\n\nYou may also optionally specify a dependency as an object, e.g. `{ kind: \"Build\", name: \"some-image\" }`.\n\nAny empty values (i.e. null or empty strings) are ignored, so that you can conditionally add in a dependency via template expressions.",
                    "default": []
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "disabled": {
                "anyOf": [
                  {
                    "type": "boolean",
                    "description": "Set this to `true` to disable the action. You can use this with conditional template strings to disable actions based on, for example, the current environment or other variables (e.g. `disabled: ${environment.name == \"prod\"}`). This can be handy when you only need certain actions for specific environments, e.g. only for development.\n\nFor Build actions, this means the build is not performed _unless_ it is declared as a dependency by another enabled action (in which case the Build is assumed to be necessary for the dependant action to be run or built).\n\nFor other action kinds, the action is skipped in all scenarios, and dependency declarations to it are ignored. Note however that template strings referencing outputs (i.e. runtime outputs) will fail to resolve when the action is disabled, so you need to make sure to provide alternate values for those if you're using them, using conditional expressions.",
                    "default": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "environments": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "If set, the action is only enabled for the listed environment types. This is effectively a cleaner shorthand for the `disabled` field with an expression for environments. For example, `environments: [\"prod\"]` is equivalent to `disabled: ${environment.name != \"prod\"}`."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "include": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "my-app.js",
                        "some-assets/**/*"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or globs that should be regarded as source files for this action, and thus will affect the computed _version_ of the action.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. An exception would be e.g. an `exec` action without a `build` reference, where the relevant files cannot be inferred and you want to define which files should affect the version of the action, e.g. to make sure a Test action is run when certain files are modified.\n\n_Build_ actions have a different behavior, since they generally are based on some files in the source tree, so please reference the docs for more information on those.\n\nNote that you can also _exclude_ files using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "exclude": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      [
                        "tmp/**/*",
                        "*.log"
                      ]
                    ],
                    "description": "Specify a list of POSIX-style paths or glob patterns that should be explicitly excluded from the action's version.\n\nFor actions other than _Build_ actions, this is usually not necessary to specify, or is implicitly inferred. For _Deploy_, _Run_ and _Test_ actions, the exclusions specified here only applied on top of explicitly set `include` paths, or such paths inferred by providers. See the [Configuration Files guide](https://docs.garden.io/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `scan.exclude` field in the project config, the filters here have _no effect_ on which files and directories are watched for changes when watching is enabled. Use the project `scan.exclude` field to affect those, if you have large directories that should not be watched for changes."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "variables": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "A map of variables scoped to this particular action. These are resolved before any other parts of the action configuration and take precedence over group-scoped variables (if applicable) and project-scoped variables, in that order. They may reference group-scoped and project-scoped variables, and generally can use any template strings normally allowed when resolving the action.",
                    "additionalProperties": true
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "varfiles": {
                "anyOf": [
                  {
                    "type": "array",
                    "examples": [
                      "my-action.env"
                    ],
                    "description": "Specify a list of paths (relative to the directory where the action is defined) to a file containing variables, that we apply on top of the action-level `variables` field, and take precedence over group-level variables (if applicable) and project-level variables, in that order.\n\nIf you specify multiple paths, they are merged in the order specified, i.e. the last one takes precedence over the previous ones.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nTo use different varfiles in different environments, you can template in the environment name to the varfile name, e.g. `varfile: \"my-action.${environment.name}.env\"` (this assumes that the corresponding varfiles exist).\n\nIf a listed varfile cannot be found, throwing an error.\nTo add optional varfiles, you can use a list item object with a `path` and an optional `optional` boolean field.\n```yaml\nvarfiles:\n  - path: my-action.env\n    optional: true\n```",
                    "default": [],
                    "items": {
                      "description": "A path to a file containing variables, or an object with a path and optional flag.",
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Path to a file containing a path."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "path": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "description": "Path to a file containing a path."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            },
                            "optional": {
                              "anyOf": [
                                {
                                  "type": "boolean",
                                  "description": "Whether the varfile is optional."
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "spec": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "policyPath": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "POSIX-style path to a directory containing the policies to match the config against, or a\nspecific .rego file, relative to the action root.\nMust be a relative path, and should in most cases be within the project root.\nDefaults to the `policyPath` set in the provider config."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "namespace": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The policy namespace in which to find _deny_ and _warn_ rules.",
                            "default": "main"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "combine": {
                        "anyOf": [
                          {
                            "type": "boolean",
                            "description": "Set to true to use the conftest --combine flag",
                            "default": false
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "build": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Specify a build whose files we want to test."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "files": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "A list of files to test with the given policy. Must be POSIX-style paths, and may include wildcards.",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\$\\{[^}]+\\}$"
                                }
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "helmDeploy": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "The Helm Deploy action to validate."
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$merge": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Merge stuff"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$if": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "If statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$else": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Else statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$then": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Then statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$forEach": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "For each statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$return": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Return statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$filter": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Filter statements"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      },
                      "$concat": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Concat lists"
                          },
                          {
                            "type": "string",
                            "pattern": "^\\$\\{[^}]+\\}$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "build": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Specify a _Build_ action, and resolve this action from the context of that Build.\n\nFor example, you might create an `exec` Build which prepares some manifests, and then reference that in a `kubernetes` _Deploy_ action, and the resulting manifests from the Build.\n\nThis would mean that instead of looking for manifest files relative to this action's location in your project structure, the output directory for the referenced `exec` Build would be the source."
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "kind": {
                "const": "Test"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer",
                    "description": "Set a timeout for the test to complete, in seconds.",
                    "default": 600,
                    "minimum": 1
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$merge": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Merge stuff"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$if": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "If statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$else": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Else statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$then": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Then statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$forEach": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "For each statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$return": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Return statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$filter": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Filter statements"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              },
              "$concat": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "Concat lists"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\$\\{[^}]+\\}$"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "string",
            "pattern": "^\\$\\{[^}]+\\}$"
          }
        ]
      }
    }
  ]
}
