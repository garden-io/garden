{
  "$ref": "#/$defs/providerConfig",
  "$defs": {
    "providerConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "examples": [
            "local-kubernetes"
          ],
          "description": "The name of the provider plugin to use.",
          "pattern": "^(?![0-9]+$)(?!.*-$)(?!-)[a-z0-9-]{1,63}$"
        },
        "dependencies": {
          "type": "array",
          "examples": [
            [
              "exec"
            ]
          ],
          "description": "List other providers that should be resolved before this one.",
          "default": []
        },
        "environments": {
          "type": "array",
          "examples": [
            [
              "dev",
              "stage"
            ]
          ],
          "description": "If specified, this provider will only be used in the listed environments. Note that an empty array effectively disables the provider. To use a provider in all environments, omit this field.",
          "items": {
            "type": "string",
            "description": "Valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash), cannot contain consecutive dashes or start with `garden`, or be longer than 63 characters.",
            "pattern": "^(?!garden)(?=.{1,63}$)[a-z][a-z0-9]*(-[a-z0-9]+)*$"
          }
        },
        "preInit": {
          "type": "object",
          "properties": {
            "runScript": {
              "type": "string",
              "description": "A script to run before the provider is initialized. This is useful for performing any provider-specific setup outside of Garden. For example, you can use this to perform authentication, such as authenticating with a Kubernetes cluster provider.\nThe script will always be run from the project root directory.\nNote that provider statuses are cached, so this script will generally only be run once, but you can force a re-run by setting `--force-refresh` on any Garden command that uses the provider."
            }
          },
          "additionalProperties": false
        },
        "version": {
          "type": [
            "string",
            "null"
          ],
          "description": "The version of pulumi to use. Set to `null` to use whichever version of `pulumi` is on your PATH.",
          "default": "3.122.0",
          "enum": [
            "3.122.0",
            "3.102.0",
            "3.70.0",
            "3.64.0",
            null
          ]
        },
        "previewDir": {
          "type": "posixPath",
          "description": "Overrides the default plan directory path used when deploying with the `deployFromPreview` option for pulumi\ndeploy actions.\n\nMust be a relative path to a directory inside the project root.\n\nThis option can be useful when you want to provide a folder of pre-approved pulumi plans to a CI pipeline step."
        },
        "orgName": {
          "type": "string",
          "description": "The name of the pulumi organization to use. This option can also be set on the deploy action level, in which case it\noverrides this provider-level option. Note that setting the organization name is only necessary when using\npulumi managed backend with an organization."
        },
        "backendURL": {
          "type": "string",
          "description": "The URL of the state backend endpoint used. This option can also be set on the deploy action level, in which case it\noverrides this  provider-level option. Set this option as per list of available self-managed state backends on\nhttps://www.pulumi.com/docs/intro/concepts/state/#using-a-self-managed-backend",
          "default": "https://api.pulumi.com",
          "format": "uri"
        },
        "pluginTaskConcurrencyLimit": {
          "type": "number",
          "description": "Sets the maximum task concurrency for the tasks generated by the pulumi plugin commands (e.g. when running\n`garden plugins pulumi preview`).\n\nNote: This limit is not applied when running built-in commands (e.g. `garden deploy`).",
          "default": 5
        },
        "useNewPulumiVarfileSchema": {
          "type": "boolean",
          "description": "If set to true, the deploy action will use the new Pulumi varfile schema, which does not nest all variables under\nthe 'config' key automatically like the old schema. This allow setting variables at the root level of the varfile\nthat don't belong to the 'config' key. Example:\n```\nconfig:\n  myVar: value\nsecretsprovider: gcpkms://projects/xyz/locations/global/keyRings/pulumi/cryptoKeys/pulumi-secrets\n```\nFor more information see [this guide on pulumi varfiles and variables](https://docs.garden.io/pulumi-plugin/about#pulumi-varfile-schema)",
          "default": false
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    }
  }
}