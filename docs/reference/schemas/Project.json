{
  "type": "object",
  "description": "Configuration for a Garden project. This should be specified in the garden.yml file in your project root.",
  "properties": {
    "apiVersion": {
      "type": "string",
      "description": "The Garden apiVersion for this project.\n\nThe value garden.io/v0 is the default for backwards compatibility with\nGarden Acorn (0.12) when not explicitly specified.\n\nConfiguring garden.io/v1 explicitly in your project configuration allows\nyou to start using the new Action configs introduced in Garden Bonsai (0.13).\n\nNote that the value garden.io/v1 will break compatibility of your project\nwith Garden Acorn (0.12).\n\nEXPERIMENTAL: Configuring garden.io/v2 explicitly in your project configuration\nactivates the breaking changes introduced in Garden 0.14.\nThe list of breaking changes is not final yet, so use this setting at your own risk.\n\nPlease refer to [the deprecations guide](https://docs.garden.io/cedar-0.14/guides/deprecations) for more information.",
      "enum": [
        "garden.io/v0",
        "garden.io/v1",
        "garden.io/v2"
      ]
    },
    "kind": {
      "description": "Indicate what kind of config this is.",
      "default": "Project",
      "const": "Project"
    },
    "path": {
      "type": "string",
      "description": "The path to the project root."
    },
    "configPath": {
      "type": "string",
      "description": "The path to the project config file."
    },
    "internal": {
      "type": "object",
      "properties": {
        "basePath": {
          "type": "string"
        },
        "configFilePath": {
          "type": "string"
        },
        "inputs": {
          "type": "object",
          "properties": {},
          "additionalProperties": false
        },
        "parentName": {
          "type": "string"
        },
        "templateName": {
          "type": "string"
        },
        "yamlDoc": {
          "type": [
            "array",
            "boolean",
            "number",
            "object",
            "string",
            "null"
          ]
        }
      },
      "required": [
        "basePath"
      ],
      "additionalProperties": true
    },
    "name": {
      "type": "string",
      "examples": [
        "my-sweet-project"
      ],
      "description": "The name of the project.",
      "pattern": "^(?![0-9]+$)(?!.*-$)(?!-)[a-z0-9-]{1,63}$"
    },
    "id": {
      "type": "string",
      "description": "The project's ID in Garden Cloud (for older versions of the backend)."
    },
    "domain": {
      "type": "string",
      "description": "The domain to use for cloud features. Should be the full API/backend URL.",
      "format": "uri"
    },
    "organizationId": {
      "type": "string",
      "description": "The ID of the organization that this project belongs to in Garden Cloud."
    },
    "environments": {
      "type": "array",
      "description": "A list of environments to configure for the project.",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "examples": [
              "dev"
            ],
            "description": "The name of the environment.",
            "pattern": "^(?!garden)(?=.{1,63}$)[a-z][a-z0-9]*(-[a-z0-9]+)*$"
          },
          "defaultNamespace": {
            "type": [
              "string",
              "null"
            ],
            "examples": [
              "user-${local.username}"
            ],
            "description": "Set the default namespace to use. This can be templated to be user-specific, or to use an environment variable (e.g. in CI).\n\nYou can also set this to `null`, in order to require an explicit namespace to be set on usage. This may be advisable for shared environments, but you may also be able to achieve the desired result by templating this field, as mentioned above.",
            "default": "default",
            "pattern": "^(?![0-9]+$)(?!.*-$)(?!-)[a-z0-9-]{1,63}$"
          },
          "production": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "Flag the environment as a production environment.\n\nSetting this flag to `true` will activate the protection on the `build`, `delete`, `deploy`, `dev`, and\n`test` commands. A protected command will ask for a user confirmation every time is run against\nan environment marked as production.\nRun the command with the \"--yes\" flag to skip the check (e.g. when running Garden in CI).\n\nThis flag is also passed on to every provider, and may affect how certain providers behave.\nFor more details please check the documentation for the providers in use.",
            "default": false
          },
          "varfile": {
            "type": "posixPath",
            "examples": [
              "custom.env"
            ],
            "description": "Specify a path (relative to the project root) to a file containing variables, that we apply on top of the\n_environment-specific_ `variables` field.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nIf you don't set the field and the `garden.<env-name>.env` file does not exist,\nwe simply ignore it. If you do override the default value and the file doesn't exist, an error will be thrown."
          },
          "variables": {
            "type": "object",
            "description": "A key/value map of variables that actions can reference when using this environment. These take precedence over variables defined in the top-level `variables` field, but may also reference the top-level variables in template strings.",
            "properties": {
              "/[a-zA-Z][a-zA-Z0-9_\\-]*/i": {
                "anyOf": [
                  {
                    "description": "Number, string or boolean",
                    "anyOf": [
                      {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  },
                  {
                    "type": "link"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "link"
                    }
                  }
                ]
              }
            },
            "additionalProperties": true,
            "patternProperties": {
              "[a-zA-Z][a-zA-Z0-9_\\-]*/": {
                "anyOf": [
                  {
                    "description": "Number, string or boolean",
                    "anyOf": [
                      {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  },
                  {
                    "type": "link"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "link"
                    }
                  }
                ]
              }
            }
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      }
    },
    "providers": {
      "type": "array",
      "description": "A list of providers that should be used for this project, and their configuration. Please refer to individual plugins/providers for details on how to configure them.",
      "default": []
    },
    "defaultEnvironment": {
      "type": "environment",
      "examples": [
        "dev"
      ],
      "description": "The default environment to use when calling commands without the `--env` parameter. May include a namespace name, in the format `<namespace>.<environment>`. Defaults to the first configured environment, with no namespace set.",
      "default": ""
    },
    "dotIgnoreFile": {
      "type": "posixPath",
      "examples": [
        ".gitignore"
      ],
      "description": "Specify a filename that should be used as \".ignore\" file across the project, using the same syntax and semantics as `.gitignore` files. By default, patterns matched in `.gardenignore` files, found anywhere in the project, are ignored when scanning for actions and action sources.\nNote that this take precedence over the project `scan.include` field, and action `include` fields, so any paths matched by the .ignore file will be ignored even if they are explicitly specified in those fields.\nSee the [Configuration Files guide](https://docs.garden.io/cedar-0.14/using-garden/configuration-overview#including-excluding-files-and-directories) for details.",
      "default": ".gardenignore"
    },
    "proxy": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "examples": [
            [
              "127.0.0.1"
            ]
          ],
          "description": "The URL that Garden uses when creating port forwards. Defaults to \"localhost\".\n\nNote that the `GARDEN_PROXY_DEFAULT_ADDRESS` environment variable takes precedence over this value.",
          "default": "localhost"
        }
      },
      "additionalProperties": false
    },
    "scan": {
      "type": "object",
      "description": "Control where and how to scan for configuration files in the project.",
      "properties": {
        "include": {
          "type": "array",
          "examples": [
            [
              "actions/**/*"
            ]
          ],
          "description": "Specify a list of POSIX-style paths or globs that should be scanned for Garden configuration files.\n\nNote that you can also _exclude_ path using the `exclude` field or by placing `.gardenignore` files in your source tree, which use the same format as `.gitignore` files. See the [Configuration Files guide](https://docs.garden.io/cedar-0.14/using-garden/configuration-overview#including-excluding-files-and-directories) for details.\n\nUnlike the `exclude` field, the paths/globs specified here have _no effect_ on which files and directories Garden watches for changes. Use the `exclude` field to affect those, if you have large directories that should not be watched for changes.\n\nAlso note that specifying an empty list here means _no paths_ should be included.",
          "items": {
            "type": "posixPath"
          }
        },
        "exclude": {
          "type": "array",
          "examples": [
            [
              "public/**/*",
              "tmp/**/*"
            ]
          ],
          "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded when scanning for configuration files.\n\nThe filters here also affect which files and directories are watched for changes. So if you have a large number of directories in your project that should not be watched, you should specify them here.\n\nFor example, you might want to exclude large vendor directories in your project from being scanned and watched, by setting `exclude: [node_modules/**/*, vendor/**/*]`.\n\nNote that you can also explicitly _include_ files using the `include` field. If you also specify the `include` field, the paths/patterns specified here are filtered from the files matched by `include`.\n\nThe `include` field does _not_ affect which files are watched.\n\nSee the [Configuration Files guide](https://docs.garden.io/cedar-0.14/using-garden/configuration-overview#including-excluding-files-and-directories) for details.",
          "items": {
            "type": "posixPath"
          }
        },
        "git": {
          "type": "object",
          "properties": {
            "mode": {
              "type": "string",
              "description": "Choose how to perform scans of git repositories. Defaults to `repo`. The `subtree` runs individual git scans on each action/module path. The `repo` mode scans entire repositories and then filters down to files matching the paths, includes and excludes for each action/module. This can be considerably more efficient for large projects with many actions/modules.",
              "default": "repo",
              "enum": [
                "repo",
                "subtree"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "outputs": {
      "type": "array",
      "description": "A list of output values that the project should export. These are exported by the `garden get outputs` command, as well as when referencing a project as a sub-project within another project.\n\nYou may use any template strings to specify the values, including references to provider outputs, action\noutputs and runtime outputs. For a full reference, see the [Output configuration context](./template-strings/project-outputs.md) section in the Template String Reference.\n\nNote that if any runtime outputs are referenced, the referenced services and tasks will be deployed and run if necessary when resolving the outputs.",
      "default": []
    },
    "sources": {
      "type": "array",
      "description": "A list of remote sources to import into project.",
      "default": []
    },
    "varfile": {
      "type": "posixPath",
      "examples": [
        "custom.env"
      ],
      "description": "Specify a path (relative to the project root) to a file containing variables, that we apply on top of the\nproject-wide `variables` field.\n\nThe format of the files is determined by the configured file's extension:\n\n* `.yaml`/`.yml` - YAML. The file must consist of a YAML document, which must be a map (dictionary). Keys may contain any value type. YAML format is used by default.\n* `.env` - Standard \"dotenv\" format, as defined by [dotenv](https://github.com/motdotla/dotenv#rules).\n* `.json` - JSON. Must contain a single JSON _object_ (not an array).\n\n_NOTE: The default varfile format was changed to YAML in Garden v0.13, since YAML allows for definition of nested objects and arrays._\n\nIf you don't set the field and the `garden.env` file does not exist, we simply ignore it.\nIf you do override the default value and the file doesn't exist, an error will be thrown.\n\n_Note that in many cases it is advisable to only use environment-specific var files, instead of combining\nmultiple ones. See the `environments[].varfile` field for this option._",
      "default": "garden.env"
    },
    "variables": {
      "type": "object",
      "description": "Key/value map of variables to configure for all environments. Keys may contain letters and numbers. Any values are permitted, including arrays and objects of any nesting.",
      "properties": {
        "/[a-zA-Z][a-zA-Z0-9_\\-]*/i": {
          "anyOf": [
            {
              "description": "Number, string or boolean",
              "anyOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            {
              "type": "link"
            },
            {
              "type": "array",
              "items": {
                "type": "link"
              }
            }
          ]
        }
      },
      "additionalProperties": true,
      "patternProperties": {
        "[a-zA-Z][a-zA-Z0-9_\\-]*/": {
          "anyOf": [
            {
              "description": "Number, string or boolean",
              "anyOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            {
              "type": "link"
            },
            {
              "type": "array",
              "items": {
                "type": "link"
              }
            }
          ]
        }
      }
    }
  },
  "required": [
    "name",
    "environments"
  ],
  "additionalProperties": false,
  "oneOf": [
    {
      "required": [
        "id"
      ]
    },
    {
      "required": [
        "organizationId"
      ]
    },
    {
      "not": {
        "oneOf": [
          {
            "required": [
              "id"
            ]
          },
          {
            "required": [
              "organizationId"
            ]
          },
          {
            "required": [
              "id",
              "organizationId"
            ]
          }
        ]
      }
    }
  ]
}