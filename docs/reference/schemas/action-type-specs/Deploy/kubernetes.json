{
  "type": "object",
  "properties": {
    "kustomize": {
      "type": "object",
      "description": "Resolve the specified kustomization and include the resulting resources. Note that if you specify `files` or `manifests` as well, these are also included.",
      "properties": {
        "path": {
          "description": "The directory path where the desired kustomization.yaml is, or a git repository URL. This could be the path to an overlay directory, for example. If it's a path, must be a relative POSIX-style path and must be within the action root. Defaults to the action root. If you set this to null, kustomize will not be run.",
          "default": ".",
          "anyOf": [
            {
              "type": "posixPath"
            },
            {
              "type": "string",
              "format": "uri"
            }
          ],
          "type": "null"
        },
        "version": {
          "type": "integer",
          "description": "The Kustomize version to use.",
          "default": 5,
          "enum": [
            4,
            5
          ]
        },
        "extraArgs": {
          "type": "array",
          "description": "A list of additional arguments to pass to the `kustomize build` command. Note that specifying '-o' or '--output' is not allowed.",
          "default": []
        }
      },
      "additionalProperties": false
    },
    "manifests": {
      "type": "array",
      "description": "List of Kubernetes resource manifests to deploy. If `files` is also specified, this is combined with the manifests read from the files.",
      "default": []
    },
    "patchResources": {
      "type": "array",
      "description": "A list of resources to patch using Kubernetes' patch strategies. This is useful for e.g. overwriting a given container image name with an image built by Garden\nwithout having to actually modify the underlying Kubernetes manifest in your source code. Another common example is to use this to change the number of replicas for a given\nKubernetes Deployment.\n\nUnder the hood, Garden just applies the `kubectl patch` command to the resource that matches the specified `kind` and `name`.\n\nPatches are applied to file manifests, inline manifests, and kustomize files.\n\nYou can learn more about patching Kubernetes resources here: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/",
      "default": []
    },
    "namespace": {
      "type": "string",
      "description": "A valid Kubernetes namespace name. Must be a valid RFC1035/RFC1123 (DNS) label (may contain lowercase letters, numbers and dashes, must start with a letter, and cannot end with a dash) and must not be longer than 63 characters.",
      "pattern": "^(?![0-9]+$)(?!.*-$)(?!-)[a-z0-9-]{1,63}$",
      "maxLength": 63
    },
    "portForwards": {
      "type": "array",
      "description": "Manually specify port forwards that Garden should set up when deploying in dev or watch mode. If specified, these override the auto-detection of forwardable ports, so you'll need to specify the full list of port forwards to create.",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "An identifier to describe the port forward.",
            "pattern": "^(?![0-9]+$)(?!.*-$)(?!-)[a-z0-9-]{1,63}$"
          },
          "resource": {
            "type": "string",
            "description": "The full resource kind and name to forward to, e.g. Service/my-service or Deployment/my-deployment. Note that Garden will not validate this ahead of attempting to start the port forward, so you need to make sure this is correctly set. The types of resources supported will match that of the `kubectl port-forward` CLI command."
          },
          "targetPort": {
            "type": "integer",
            "description": "The port number on the remote resource to forward to."
          },
          "localPort": {
            "type": "integer",
            "description": "The _preferred_ local port to forward from. If none is set, a random port is chosen. If the specified port is not available, a warning is shown and a random port chosen instead."
          }
        },
        "required": [
          "resource",
          "targetPort"
        ],
        "additionalProperties": false
      }
    },
    "timeout": {
      "type": "integer",
      "description": "The maximum duration (in seconds) to wait for resources to deploy and become healthy.",
      "default": 300
    },
    "applyArgs": {
      "type": "array",
      "description": "Additional arguments to pass to `kubectl apply`."
    },
    "waitForJobs": {
      "type": "boolean",
      "description": "Wait until the jobs have been completed. Garden will wait for as long as `timeout`.",
      "default": true
    },
    "defaultTarget": {
      "type": "object",
      "description": "Specify a default resource in the deployment to use for syncs and for the `garden exec` command.\n\nSpecify either `kind` and `name`, or a `podSelector`. The resource should be one of the resources deployed by this action (otherwise the target is not guaranteed to be deployed with adjustments required for syncing).\n\nSet `containerName` to specify a container to connect to in the remote Pod. By default the first container in the Pod is used.\n\nNote that if you specify `podSelector` here, it is not validated to be a selector matching one of the resources deployed by the action.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The kind of Kubernetes resource to find.",
          "enum": [
            "Deployment",
            "DaemonSet",
            "StatefulSet"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
        },
        "podSelector": {
          "type": "object",
          "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
          "properties": {
            "/.+/": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            ".+": {
              "type": "string"
            }
          }
        },
        "containerName": {
          "type": "string",
          "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
        }
      },
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "required": [
              "podSelector"
            ]
          },
          "then": {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "kind"
                  ]
                },
                {
                  "required": [
                    "name"
                  ]
                }
              ]
            }
          }
        },
        {
          "if": {
            "propertyNames": {
              "enum": [
                "kind",
                "podSelector"
              ]
            },
            "minProperties": 2
          },
          "then": false,
          "else": {
            "oneOf": [
              {
                "required": [
                  "kind"
                ]
              },
              {
                "required": [
                  "podSelector"
                ]
              }
            ]
          }
        }
      ],
      "dependentRequired": {
        "name": [
          "kind"
        ]
      }
    },
    "sync": {
      "type": "object",
      "description": "Configure path syncs for the resources in this Deploy.\n\nIf you have multiple syncs for the Deploy, you can use the `defaults` field to set common configuration for every individual sync.",
      "properties": {
        "defaults": {
          "type": "object",
          "description": "Defaults to set across every sync for this Deploy. If you use the `exclude` field here, it will be merged with any excludes set in individual syncs. These are applied on top of any defaults set in the provider configuration.",
          "properties": {
            "exclude": {
              "type": "array",
              "examples": [
                [
                  "dist/**/*",
                  "*.log"
                ]
              ],
              "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\nAny exclusion patterns defined in individual sync specs will be applied in addition to these patterns.\n\n`.git` directories and `.garden` directories are always ignored.",
              "items": {
                "type": "posixPath"
              }
            },
            "fileMode": {
              "type": "number",
              "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
              "default": 420,
              "minimum": 0,
              "maximum": 511
            },
            "directoryMode": {
              "type": "number",
              "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
              "default": 493,
              "minimum": 0,
              "maximum": 511
            },
            "owner": {
              "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "group": {
              "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "paths": {
          "type": "array",
          "description": "A list of syncs to start once the Deploy is successfully started.",
          "items": {
            "type": "object",
            "description": "Define a sync to start after the initial Deploy is complete.",
            "properties": {
              "target": {
                "type": "object",
                "description": "The Kubernetes resource to sync to. If specified, this is used instead of `spec.defaultTarget`.",
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "The kind of Kubernetes resource to find.",
                    "enum": [
                      "Deployment",
                      "DaemonSet",
                      "StatefulSet"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                  },
                  "podSelector": {
                    "type": "object",
                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                    "properties": {
                      "/.+/": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      ".+": {
                        "type": "string"
                      }
                    }
                  },
                  "containerName": {
                    "type": "string",
                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                  }
                },
                "additionalProperties": false,
                "allOf": [
                  {
                    "if": {
                      "required": [
                        "podSelector"
                      ]
                    },
                    "then": {
                      "not": {
                        "anyOf": [
                          {
                            "required": [
                              "kind"
                            ]
                          },
                          {
                            "required": [
                              "name"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "if": {
                      "propertyNames": {
                        "enum": [
                          "kind",
                          "podSelector"
                        ]
                      },
                      "minProperties": 2
                    },
                    "then": false,
                    "else": {
                      "oneOf": [
                        {
                          "required": [
                            "kind"
                          ]
                        },
                        {
                          "required": [
                            "podSelector"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "dependentRequired": {
                  "name": [
                    "kind"
                  ]
                }
              },
              "sourcePath": {
                "type": "string",
                "examples": [
                  "src"
                ],
                "description": "Path to a local directory to be synchronized with the target.\nThis should generally be a templated path to another action's source path (e.g. `${actions.build.my-container-image.sourcePath}`), or a relative path.\nIf a path is hard-coded, we recommend sticking with relative paths here, and using forward slashes (`/`) as a delimiter, as Windows-style paths with back slashes (`\\`) and absolute paths will work on some platforms, but they are not portable and will not work for users on other platforms.\nDefaults to the Deploy action's config's directory if no value is provided.",
                "default": "."
              },
              "containerPath": {
                "type": "posixPath",
                "examples": [
                  "/app/src"
                ],
                "description": "POSIX-style absolute path to sync to inside the container. The root path (i.e. \"/\") is not allowed.",
                "not": {
                  "type": "posixPath",
                  "enum": [
                    "/"
                  ]
                }
              },
              "exclude": {
                "type": "array",
                "examples": [
                  [
                    "dist/**/*",
                    "*.log"
                  ]
                ],
                "description": "Specify a list of POSIX-style paths or glob patterns that should be excluded from the sync.\n\n`.git` directories and `.garden` directories are always ignored.",
                "items": {
                  "type": "posixPath"
                }
              },
              "mode": {
                "type": "string",
                "description": "The sync mode to use for the given paths. See the [Code Synchronization guide](https://docs.garden.io/cedar-0.14/guides/code-synchronization) for details.",
                "default": "one-way-safe",
                "enum": [
                  "one-way",
                  "one-way-safe",
                  "one-way-replica",
                  "one-way-reverse",
                  "one-way-replica-reverse",
                  "two-way",
                  "two-way-safe",
                  "two-way-resolved"
                ]
              },
              "defaultFileMode": {
                "type": "number",
                "description": "The default permission bits, specified as an octal, to set on files at the sync target. Defaults to 0o644 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                "default": 420,
                "minimum": 0,
                "maximum": 511
              },
              "defaultDirectoryMode": {
                "type": "number",
                "description": "The default permission bits, specified as an octal, to set on directories at the sync target. Defaults to 0o755 (user can read/write, everyone else can read). See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#permissions) for more information.",
                "default": 493,
                "minimum": 0,
                "maximum": 511
              },
              "defaultOwner": {
                "description": "Set the default owner of files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "defaultGroup": {
                "description": "Set the default group on files and directories at the target. Specify either an integer ID or a string name. See the [Mutagen docs](https://mutagen.io/documentation/synchronization/permissions#owners-and-groups) for more information.",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": [
              "containerPath"
            ],
            "additionalProperties": false
          }
        },
        "overrides": {
          "type": "array",
          "description": "Overrides for the container command and/or arguments for when in sync mode.",
          "items": {
            "type": "object",
            "properties": {
              "target": {
                "type": "object",
                "description": "The Kubernetes resources to override. If specified, this is used instead of `spec.defaultTarget`.",
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "The kind of Kubernetes resource to find.",
                    "enum": [
                      "Deployment",
                      "DaemonSet",
                      "StatefulSet"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the resource, of the specified `kind`. If specified, you must also specify `kind`."
                  },
                  "podSelector": {
                    "type": "object",
                    "description": "A map of string key/value labels to match on any Pods in the namespace. When specified, a random ready Pod with matching labels will be picked as a target, so make sure the labels will always match a specific Pod type.",
                    "properties": {
                      "/.+/": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      ".+": {
                        "type": "string"
                      }
                    }
                  },
                  "containerName": {
                    "type": "string",
                    "description": "The name of a container in the target. Specify this if the target contains more than one container and the main container is not the first container in the spec."
                  }
                },
                "additionalProperties": false,
                "allOf": [
                  {
                    "if": {
                      "required": [
                        "podSelector"
                      ]
                    },
                    "then": {
                      "not": {
                        "anyOf": [
                          {
                            "required": [
                              "kind"
                            ]
                          },
                          {
                            "required": [
                              "name"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "if": {
                      "propertyNames": {
                        "enum": [
                          "kind",
                          "podSelector"
                        ]
                      },
                      "minProperties": 2
                    },
                    "then": false,
                    "else": {
                      "oneOf": [
                        {
                          "required": [
                            "kind"
                          ]
                        },
                        {
                          "required": [
                            "podSelector"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "dependentRequired": {
                  "name": [
                    "kind"
                  ]
                }
              },
              "command": {
                "type": "array",
                "description": "Override the command/entrypoint in the matched container."
              },
              "args": {
                "type": "array",
                "description": "Override the args in the matched container."
              },
              "image": {
                "type": "string",
                "description": "Override the image of the matched container."
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "localMode": {
      "type": "object",
      "description": "This feature has been deleted.",
      "properties": {
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "local": {
                "type": "integer"
              },
              "remote": {
                "type": "integer"
              }
            },
            "additionalProperties": false
          }
        },
        "command": {
          "type": "array"
        },
        "restart": {
          "type": "object",
          "properties": {
            "delayMsec": {
              "type": "integer"
            },
            "max": {
              "type": "integer"
            }
          },
          "additionalProperties": false
        },
        "target": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "podSelector": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "manifestFiles": {
      "type": "array",
      "description": "POSIX-style paths to YAML files to load manifests from. Garden will *not* use the Garden Template Language to transform manifests in these files. Each file can contain multiple manifests.",
      "default": []
    },
    "manifestTemplates": {
      "type": "array",
      "description": "POSIX-style paths to YAML files to load manifests from. Each can contain multiple manifests, and can include any Garden template strings, which will be resolved before applying the manifests.",
      "default": []
    }
  },
  "additionalProperties": false
}