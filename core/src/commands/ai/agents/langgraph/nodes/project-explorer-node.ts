/*
 * Copyright (C) 2018-2025 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

import type { ChatAnthropic } from "@langchain/anthropic"
import type { AgentContext } from "../../../types.js"
import { NODE_NAMES } from "../../../types.js"
import { BaseAgentNode } from "./base-node.js"
import { z } from "zod"
import type { StateAnnotation } from "../types.js"

/**
 * Project explorer node that uses tools to explore the project structure
 */
export class ProjectExplorerNode extends BaseAgentNode {
  constructor(context: AgentContext, model: ChatAnthropic) {
    super(context, model)
    this.tools = this.tools.filter(
      (tool) => tool.name !== "write_file" && tool.name !== "write_files" && tool.name !== "remove_files"
    )
  }

  getName() {
    return NODE_NAMES.PROJECT_EXPLORER
  }

  getAgentDescription(): string {
    return "Project exploration agent. Use this to explore the project structure and gather high-level information about the project."
  }

  getSystemPrompt(): string {
    return `You are the ProjectExplorer, responsible for exploring project structure and gathering relevant information.

You have access to these tools:
- list_directory: List files and directories
- read_files: Read content of specific files

Your task is to:
1. Start by listing the root directory recursively
2. Identify relevant subdirectories and configuration files based on the user's query
3. Explore those directories and read important files. Try to read multiple files in one call to read_files
4. Summarize your findings in a clear, structured format

Focus on finding:
- Configuration files (Dockerfile, docker-compose.yml, garden.yml, etc.)
- Kubernetes manifests (*.yaml, *.yml in k8s/, kubernetes/, manifests/ directories)
- Helm charts
- Terraform files (*.tf, *.tfvars)
- Package files (package.json, requirements.txt, etc.)
- Any other files relevant to the user's query

You MUST ONLY list and read files from within the project root directory.

No need to introduce yourself, just describe what you're doing and what you've found. Do not suggest any further actions.

Once you have completed your exploration, return a concise summary of your findings in the \`response\` field **and** set \`goto\` to \`main_agent\` so that planning can continue.

You MUST ONLY perform the above tasks. You MUST NOT do anything else.
`
  }

  override getSummaryPrompt(): string {
    return `Based on the exploration results and tool outputs, provide a summary of the project structure. Focus on the key findings that would be relevant for answering DevOps questions.`
  }

  /**
   * Override makeNode to restrict context passed to the model: only include
   * (1) this node's prior messages and its tool replies, (2) the triggering
   * instruction from the main agent.
   */
  override makeNode(_params: { endNodeName: string }) {
    return async (state: typeof StateAnnotation.State) => {
      // 1. Gather explorer-related messages (AI + associated tool messages)
      const relevantMessages: (typeof state.messages)[number][] = []

      this.debugLogMessages("state.messages", state.messages)

      for (let i = 0; i < state.messages.length; i++) {
        const msg = state.messages[i]

        // Messages previously generated by this node
        if (msg.getType() === "ai" && "name" in msg && msg.name === this.getName()) {
          relevantMessages.push(msg)

          // Include subsequent tool messages that belong to this AI turn
          let k = i + 1
          while (k < state.messages.length && state.messages[k].getType() === "tool") {
            relevantMessages.push(state.messages[k])
            k++
          }
        }
      }

      // 2. Include the latest instruction/task from the main agent (if any)
      const lastMainAgentMsg = [...state.messages].reverse().find((m) => m.getType() === "human")

      if (lastMainAgentMsg) {
        relevantMessages.unshift(lastMainAgentMsg)
      }

      this.debugLogMessages("relevant messages", relevantMessages)

      // Define structured output schema
      const responseSchema = z.object({
        response: z.string(),
        goto: z.literal(NODE_NAMES.MAIN_AGENT),
      })

      // Use helper that handles tool interaction (from BaseAgentNode)
      const command = await this.generateResponse(state, responseSchema, relevantMessages)

      return command
    }
  }
}
